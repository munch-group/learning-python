[
  {
    "objectID": "lecture_notes/chapters/python/preface.html",
    "href": "lecture_notes/chapters/python/preface.html",
    "title": "How to learn from this book",
    "section": "",
    "text": "These lecture notes are inspired by the many different books and resources I have used in this course over the years. Especially, “Learning Python the hard way” and “How to think like a computer scientist”. Writing my own notes allows me to fully implement the following ideas, which I think best supports learning in the introduction to programming:\n\nEach topic and concept is introduced so that it can be applied right away on top of what you know so far.\nIntroduction of each topic covers only the most basic facts and rules required to then learn the rest through practical exercises.\n\nSo to meet the learning goals you must:\n\nRead, practice and understand everything in the order it is presented.\nCarefully complete and reflect on all the exercises.\n\nI would like to improve on these notes as much as I can. So you find errors in exercises, that something is poorly explained, that something is redundant, that something is missing, that something would work better in a different ordrer, please let me know. You can easly do this by reporting an issue using this link.\nHappy coding.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>How to learn from this book</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/before_you_begin.html",
    "href": "lecture_notes/chapters/python/before_you_begin.html",
    "title": "Before you begin",
    "section": "",
    "text": "Install Python\nIn this course, we use the Python programming language, and we need the Python program to run the code we will write. We will use a distribution of Python called Anaconda. Anaconda is the easiest way of installing Python on Windows, macOS (Mac), and Linux. To install Anaconda, head to this site. Click “Download”. When the download has completed, double-click the file you just downloaded and follow the instructions on the screen. It is important that you accept all the suggested installation settings.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Before you begin</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/before_you_begin.html#the-text-editor",
    "href": "lecture_notes/chapters/python/before_you_begin.html#the-text-editor",
    "title": "Before you begin",
    "section": "The text editor",
    "text": "The text editor\nYou will also need a text editor. A text editor is where you write your Python code. For this course, we will use Visual Studio Code - or VScode for short. You can download it from this page. If you open VScode, you should see something like [@fig:figure0]. You may wonder why we cannot just Word to create and edit files with programming code. The reason is that a text editor made for programming, such as VScode, only saves the actual characters you type. So unlike, Word, it does not silently save all kinds of formatting, like margins, bold face text, headers, etc. With VScode, what you type is exactly what ends up in the file when you save it. In addition, where Word is made for prose, VScode is made for programming and has a lot of features that you will make your programming life easier.\n\n\n\nVisual Studio Code (VScode)",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Before you begin</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/before_you_begin.html#the-terminal",
    "href": "lecture_notes/chapters/python/before_you_begin.html#the-terminal",
    "title": "Before you begin",
    "section": "The terminal",
    "text": "The terminal\nThe last thing you need is a tool to make Python run the programs you write. Fortunately, that is already installed. On OSX this is an application called Terminal. You can find it by typing “Terminal” in Spotlight Search. When you start you will see something like @fig:terminal. You may be presented with the following text:\nThe default interactive shell is now zsh.\nTo update your account to use zsh, please run `chsh -s /bin/zsh`.\nFor more details, please visit https://support.apple.com/kb/HT208050.\n\n\n\nThe Terminal app on Mac\n\n\n\n\n\nAnaconda Powershell Prompt app on Windows\n\n\nDo not update your account after you install Anaconda (see below). If you do, Terminal will not be able to find the Anaconda Python (If you did so by mistake anyway, you change back using this command: chsh -s /bin/bash.\nOn Windows the tool you need is called the Anaconda Powershell Prompt and was installed along with Anaconda Python. You should be able to find it from Start menu. Make sure you open Anaconda Powershell Prompt and not Anaconda Prompt. They are different programs. If you open Anaconda Powershell Prompt you should see something like @fig:anacondaprompt.\nWhat is Anaconda Powershell Prompt and this Terminal thing, you ask. Both programs are what we call terminal emulators. They are programs used to run other programs, like the ones you are going to write yourself. I will informally refer to both Terminal and Anaconda Powershell Prompt as “the terminal” So if I write something like “open the terminal”, you should open Anaconda Powershell Prompt if you are running Windows and the Terminal application if you are running OS X.\nThe terminal is a very useful tool. To use it, however, you need to know a few basics. First of all, a terminal lets you execute commands on your computer. You simply type the command you want and then hit enter. The place where you type is called a prompt (or command prompt) and it may look a little different depending on which terminal emulator you use. In this book we represent the prompt with the character $. So a command in the examples below is the line of text to the left of the $. When you open the terminal you’ll be located in a folder. You can see which folder you are in by typing pwd, and then press Enter on the keyboard. When you press Enter you tell the terminal to execute the command you just wrote. In this case, the command you typed simply tells you the path to the folder we are in. If I do it I get:\n$ pwd\n/Users/kasper/programming\nIf I had been on a windows machine it would have looked something like:\n$ cd\nC:\\Users\\kasper\\programming\nSo right now I am in the folder programming. /Users/kasper/programming is the path or “full address” of the folder with dashes (or backslashes on windows) separating nested folders. So programming is a subfolder of kasper which is a subfolder of Users. That way you not only know which folder you are in but also where that folder is. Let us see what is in this folder. You can use the ls command (l as in Lima and s as in Sierra). When I do that and press Enter I get:\n$ ls\nnotes projects\nIt seems that there are two other folders, one called notes and another called projects. If you are curious about what is inside the notes folder, you can “walk” into the folder with the cd command. To use this command you must specify which folder you want to walk into (in this case notes). We do this by typing cd, then a space and the then name of the folder. When I press enter I get:\n$ cd notes\n$\nIt seems that nothing really happened, but if I run the pwd command now to see which folder I am in, I get:\n$ pwd\n/Users/kasper/programming/notes\nJust to keep track of what is happening: before we ran the cd command we were in the directory /Users/kasper/programming folder, and now we’re in /Users/kasper/programming/notes. This means that we can now use the ls command to see what is in the notes folder:\n$ ls\n$\nAgain it seems like nothing happened. Well, ls and dir do not show anything if the folder we are in is empty. So notes must be empty. Let us go back to where we came from. To walk “back” or “up” to /Users/kasper/programming we again use the cd command, but this time we do not need to name a folder. Instead, we use the special name .. to say that we wish to go to the parent folder called programming, i.e. the folder we just came from:\n$ cd ..\n$ pwd\n/Users/kasper/programming\nNow when we run the pwd command we see that we are back where we started. Let us see if the two folders are still there:\n$ ls\nnotes projects\nThey are!\nHopefully, you are now able to use navigate your folders and see what is in them. You will need this later to go to the folders with the code you write for the exercises and projects during the course.\n\n\n\nAction\nOSX\n\n\n\n\nShow current folder\npwd\n\n\nList folder content\nls\n\n\nGo to subfolder “notes”\ncd notes\n\n\nGo to parent folder\ncd ..",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Before you begin</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/before_you_begin.html#create-a-conda-envirionment-for-the-course",
    "href": "lecture_notes/chapters/python/before_you_begin.html#create-a-conda-envirionment-for-the-course",
    "title": "Before you begin",
    "section": "Create a conda envirionment for the course",
    "text": "Create a conda envirionment for the course\nIn bioinformatics, we install packages and programs so we can use them in our analyses and pipelines. Sometimes, however, the versions of packages you need for one project conflicts with the versions you need for other projects that you work on in parallel. Such conflicts seem like an unsolvable problem. Would it not be fantastic if you could create a small insulated world for each project, which then only contained the packages you needed for that particular project?. If each project had its own isolated world, then there would be no such version conflicts. Fortunately, there is a tool that lets you do just that, and its name is Conda.\n\nConda is an open source package management system and environment management system for installing multiple versions of software packages and their dependencies and switching easily between them.\n\nThe small worlds that Conda creates are called “environments”. You can create as many environments as you like, and then use each one for a separate bioinformatics project, a course, a bachelor project, or whatever you would like to insulate from everything else. Conda also downloads and installs the packages for you and it makes sure that the software packages you install in each environment are compatible. It even makes sure that packages needed by packages (dependencies) are also installed. Conda is truly awesome.\nWhen you install Anaconda, Conda makes a single base environment for you. It is called “base” and this is why it says “(base)” on your terminal.\nIn this course, you need to install programs, and python libraries that could conflict with the packages you need for other courses or future projects. So we will create an isolated Conda environment for Bioinformatics and Programming to avoid such conflicts. Conda is a program you run from the command line, just like python or cd. So open your terminal (i.e., the “Terminal” program if you are on a Mac and the “Anaconda Powershell Prompt” program if you are on Windows). Now copy/paste these command lines into the terminal one at a time and press return (enter) after pasting each one:\nconda create -y -n bioprog\nconda activate bioprog\nconda config --env --add channels conda-forge\nconda config --env --add channels sepandhaghighi\nconda config --env --add channels kaspermunch\nconda install -y python=3.9 pygments=2.16.1 textual=0.37.1 rich=13.6.0 art=6.1 bp-help\nThis commands run the Conda program and tells it to create a new environment with name “bioprog” and to install the packages we need in that environment. Once you hit enter on the last command, Conda works for some time and then writes a long list of packages in your terminal. These are all the packages and dependencies required in versions that all fit together.\nNotice how the command prompt changed from “(base)” to “(bioprog)” to show that you are now in the bioprog environment. Looks like nothing changed, but now you have access to terminal commands not available in the base environment. You will learn about these later. Try this command:\nconda deactivate\nNotice how it now again says “(base)” on your command prompt. That is because you are back in your base environment. Every time you start a new terminal window, you will need to run conda activate bioprog to activate the environment to be able to access the course tools.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Before you begin</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/before_you_begin.html#you-are-all-set",
    "href": "lecture_notes/chapters/python/before_you_begin.html#you-are-all-set",
    "title": "Before you begin",
    "section": "You are all set",
    "text": "You are all set\nWell done! You are all set to start the course. Have a cup of coffee and look forward to your first program. While you sip your coffee, I need to you take an oath (one of three you will take during this course). Raise your right hand! (put the coffee in your left).\n\nOath 1: I swear never to copy and paste code examples from this book into my text editor. I will always read the examples in then type them into my editor.\n\nThis serves three purposes (as if one was not enough):\n\nYou will be fully aware of each and every bit of each example.\nYou will learn to write code correctly and without omissions and mistakes.\nYou will get Python “into your fingers”. It sounds silly, but it will get into your fingers.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Before you begin</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/appendix_conda_and_pymol.html",
    "href": "lecture_notes/chapters/python/appendix_conda_and_pymol.html",
    "title": "Appendix: Conda environment for BSF",
    "section": "",
    "text": "Creating an environment for BSF\nWhen you install Anaconda, Conda makes a single base environment for you. It is called “base” and this is why it says “(base)” on your terminal.\nMany of you take the course “Biomolecular Structure and Function” (let us call that BSF) alongside this course. In BSF, you need to install programs (e.g. PyMol) that may conflict with the packages you need for Bioinformatics and Programming. So we will create isolated Conda environments for each course to avoid such conflicts. Conda is a program you run from the command line, just like python or cd. So open your terminal (i.e., the “Terminal” program if you are on a Mac and the “Anaconda Powershell Prompt” program if you are on Windows). You need to two different set of commands depending on what chip set your computer has. If you have a new Mac it may have the new M1 or M2 chips. If you click the top left apple icon and select “About This Mac”, it will say “Apple M1” or “Apple M2” if it is.\nIf your Mac is an M1/M2 Mac, you create a conda environment for BSF by copy/pasteing these command lines into the terminal one at a time and press return (enter) after pasting each one:\nOtherwise, you create a conda environment for BSF by copy/pasteing these command lines into the terminal one at a time and press return (enter) after pasting each one:\nNotice how the command prompt changed from “(base)” to “(bioprog)” to show that you are now in the bioprog environment. Looks like nothing changed, but now you have access to terminal commands not available in the base envirionment. You will learn about these later. Try this command:\nNotice how it now again says “(base)” on your command prompt. That is because you are back in your base environment. Every time you start a new terminal window, you will need to run conda activate BSF to activate the BSF environment to be able to access pymol. Try it out:\nand press enter. Voila, you are now back in the BSF environment. Notice how the command prompt changed from “(base)” to “(BSF)” to show that you are now in the BSF environment. To run PyMol that you installed in this environment, just type\nand hit enter.\nNow try to close PyMol. Then go back to your terminal and type\nNotice how it now again says “(base)” on your command prompt. That is because you are back in your base environment. Try to type pymol (and hit enter), you terminal will tell you that it could not find anything called pymol. This is the way it should be. That is because PyMols is installed in the BSF environment, not in the base environment. It illustrates how the base environment is entirely separate from the BSF environment you just made.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Appendix: Conda environment for BSF</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/appendix_conda_and_pymol.html#creating-an-environment-for-bsf",
    "href": "lecture_notes/chapters/python/appendix_conda_and_pymol.html#creating-an-environment-for-bsf",
    "title": "Appendix: Conda environment for BSF",
    "section": "",
    "text": "CONDA_SUBDIR=osx-64 conda create -y -n BSF\nconda activate BSF\nconda config --env --set subdir osx-64\nconda install -y -c conda-forge -c anaconda -c schrodinger pymol-bundle pyqt\n\nconda create -y -n BSF\nconda activate BSF\nconda install -y -c conda-forge -c anaconda -c schrodinger pymol-bundle pyqt\n\nconda deactivate\n\nconda activate BSF\n\npymol\n\n\nconda deactivate",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Appendix: Conda environment for BSF</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/appendix_conda_and_pymol.html#starting-pymol",
    "href": "lecture_notes/chapters/python/appendix_conda_and_pymol.html#starting-pymol",
    "title": "Appendix: Conda environment for BSF",
    "section": "Starting PyMol",
    "text": "Starting PyMol\nFrom now on, you can start PyMol by typing these commands into the terminal (Anaconda Powershell Prompt on Windows):\nconda activate BSF\n(hit enter)\npymol\n(hit enter)",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Appendix: Conda environment for BSF</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/writing_a_program.html",
    "href": "lecture_notes/chapters/python/writing_a_program.html",
    "title": "Writing a program",
    "section": "",
    "text": "Hello World\nDive in and make your first program. Begin by creating a new file in your editor (VScode) and save it as hello.py. The .py suffix tells your editor that this file contains Python code. As you will see, this makes your life a whole lot easier. Such a file with Python code is usually called a script, but we can also call it a program.\nNow write exactly this in the file (hello.py):\nYour editor will color your code a little differently, but that is not important. Save your file with the added code, and you have your first program! Of course, there is not much point in having a program if it just sits there on your computer. To run your program, do the following:\nYou should see something like [@fig:hello_world].\nThis is where you shout “it’s alive!”, toss your head back and do the insane scientist laugh.\nOkay, what just happened? You wrote a program by creating a file in which you wrote one line of code. You then ran the program using Python and it wrote (printed) Hello world in the terminal. Do not worry about the parentheses and quotes for now and just enjoy your new life as a programmer.\nMaybe you wonder why we write print and not write or something else? That actually goes all the way back to the days when computers were big clunky things with no screens attached. They could only interact with the user by printing out things on a real physical paper printer. Back then, the output you now see on the screen was printed onto a piece of paper that the programmer could then look at. These days print shows up in the terminal, but the story should help you remember that print spits text out of your program just like a printer.\nNow try to add another line of code like this:\nSave the file and run it again by typing python hello.py in your terminal and hit Enter.\nYou should see this:\nNow your program first prints Hello world and then it prints I am your first program. The then-part is important. That is how a Python program works. Python (the python you write in front of hello.py) reads your hello.py file and then executes the code, one line after another until it reaches the end of the file.\nThis is essential, so read that paragraph again. Now read it once more. It may seem trivial, but it is absolutely fundamental always to remember that this is how Python runs your code. So here is oath 2:\nWhen you write Python code, you always follow this workflow:\nMake sure you get the hang of this in the following exercises.\nImportant: The examples and exercises in this course are designed to work if you execute your scripts from the folder they are stored in. So you must navigate into the relevant folder before you execute your script. If your script is called hello.py, you must always execute it exactly like this: python hello.py. On some computers it is possible to just type hello.py without python in front of it. Do not do that. Also, do not “drag” the script file into the Terminal either.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Writing a program</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/writing_a_program.html#hello-world",
    "href": "lecture_notes/chapters/python/writing_a_program.html#hello-world",
    "title": "Writing a program",
    "section": "",
    "text": "print(\"Hello world\")\n\n\nOpen the terminal and navigate to the folder (directory) where you saved hello.py. Use the cd command to do so. If you do not remember how, go back and read the previous chapter again.\nType python hello.py in the terminal and hit Enter.\n\n\n\n\n\nHello world\n\n\n\n\n\n\nprint(\"Hello world\")\nprint(\"I am your first program\")\n\n\nHello world\nI am your first program\n\n\n\nOath 2: I swear always to remember that each line of code in my script is executed one after another, starting from the first line in the script and ending at the last line.\n\n\n\nChange the code in the file.\nSave the file.\nExecute the code in the file using the terminal.\nStart over.\n\n\n\n\nExercise\nTry to swap the two lines of code in the file and run the program again. What does it print now?\n\n\nExercise\nTry to make the program print a greeting to yourself. Something like this:\nHello Sarah!\n– if your name is Sarah, of course.\n\n\nExercise\nAdd more lines of code to your program to make it print something else. Can you make your program print the same thing ten times?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Writing a program</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/writing_a_program.html#error-messages",
    "href": "lecture_notes/chapters/python/writing_a_program.html#error-messages",
    "title": "Writing a program",
    "section": "Error Messages",
    "text": "Error Messages\nDid you get everything just right with your first program or did you get error messages when you executed your code with python? Maybe you wrote the following code (adding an extra closing parenthesis):\nprint(\"Hello world\"))\n– and then got an error like this:\n  File \"hello.py\", line 1\n    print('Hello world'))\n                        ^\nSyntaxError: invalid syntax\nThis is Python’s way of telling you that the hello.py script has an error in line 1. If you write something that does not conform to the proper syntax for Python code then you will get a SyntaxError. Python will do its best to figure out where the problem is and point to it with a ^ character.\nYou will see many such error messages in your new life as a programmer. So it is important that you practice reading them. At first, they will be hard to decipher, but once you get used to them, they will help you quickly identify where the problem is. If there is an error message that you do not understand the internet is your friend. Just paste the error message into Google’s search field, and you will see that you are not the only one out there getting started on Python programming. It is okay if you do not know how to fix the problem right now, but it is essential to remember that these error messages are Pythons way of helping you understand what you did wrong.\n\nExercise\nTry to break your new shiny program and make it produce an error message when you run it. An easy way of doing this is to remove or change random characters from the program. If you run this (with a missing end-parenthesis:\nprint(\"Hello world\"\nprint(\"I am your first program\")\nYou will get this error\n  File \"hello.py\", line 2\n    print(\"I am your first program\")\n        ^\nSyntaxError: invalid syntax\nThe ^ character tells you when your code stopped making sense to Python. Some times that is a bit after where you made your mistake.\nTry to make other kinds of errors. Which error messages do you see? Do you see the same error message every time, or are they different? Try googling the error messages you get. Can you figure out why the change you made broke the program? How many different error messages can you produce?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Writing a program</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/writing_a_program.html#strings",
    "href": "lecture_notes/chapters/python/writing_a_program.html#strings",
    "title": "Writing a program",
    "section": "Strings",
    "text": "Strings\nIn programs, text values are called strings, and you have already used strings a lot in your first program. A string is simply a piece of text, but we call it a string because it is a “string of characters”. In Python, we represent a string like this:\n\"this is a string\"\nor like this:\n'Hello world'\nThat is, we take the text we wish to use as our value, and we put quotes around it. We are allowed to use either double quotes (the first example) or single quotes (the second example). We can mix them like this:\nprint('this is \"some text\" with a quotes')\n– but not like this:\nprint(\"this is a broken string')\nCan you see why, and how it is handy to have both single and double quotes? Well, if we did not have both, we could not have text with quotes in it. You just need to remember to use the same kind of quotes at each end of the string. Running the latter example gives an error message telling you that Python cannot find the quote that was supposed to end the string:\n  File \"broken.py\", line 1\n    print(\"this is a broken string')\n                                   ^\nSyntaxError: EOL while scanning string literal\nIt is Python’s way of saying: “I got to the end of the line (EOL) without finding an matching end quote”.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Writing a program</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/writing_a_program.html#comments",
    "href": "lecture_notes/chapters/python/writing_a_program.html#comments",
    "title": "Writing a program",
    "section": "Comments",
    "text": "Comments\nYou have already learnt that Python reads and executes one line of code at a time until your program has no more lines of code.\nHowever, we can make a line invisible to Python by putting a # symbol in front of it, like this:\n# print(\"Hello world\")\nprint(\"Greetings from your first program\")\nWhen you do that, Python simply does not read that line. It is not part of the program. Run the program again. You will notice that now only the second line is part of your program:\n$ python hello.py\nGreetings from your first program\nThis is useful in two ways:\n\nIt lets you disable certain lines of your code, by keeping Python from reading them. For example, you may want to see what happens if that line of code was not executed to understand how your program works.\nIt allows you to write notes in your code Python to help you remember how your code works.\n\nLines with a # in front are called “comments” because we normally use them to write comments about the code we write. If you ask for help about some problem, you will often hear your instructor say: try to “comment out” line two. When your instructor says that, it simply means that you should add a # in front of line two to see what then happens.\n\nExercise\nWhat happens if I put a # in the middle of a line of code? Try it out!\n\n\nExercise\nTry this:\n# Note to self: the lines below print stuff\nprint(\"Hello world\")\nprint(\"Greetings from your first program\")\n\n\nExercise\nTry this:\nprint(\"Hello world\") # actually, everything after a # is ignored\nprint(\"Greetings from your first program\")\nWhat did yo learn? Which parts of each line are considered part of the program?\n\n\nExercise\nNow try this:\nprint(\"Hello # world\")\nprint(\"Greetings from your first program\")\nWhat did you learn about # characters in strings? #### Exercise Try this:\nprint(\"Hello world\"#)\nprint(\"Greetings from your first program\")\nDid you expect this to work? Why? Why not? What error message did you get?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Writing a program</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dealing_with_values.html",
    "href": "lecture_notes/chapters/python/dealing_with_values.html",
    "title": "Dealing with values",
    "section": "",
    "text": "Math\nMuch programming is done to compute stuff. In Python the usual math operations are done using these arithmetic operators:\nYou are probably quite familiar with these - except perhaps for integer division, exponentiation and modulo. Let us take some of the operators for a spin. Remember to carefully write the whole thing in an empty file in VScode. Do not copy-paste. Then save the file as mathandlogic.py and run it from the terminal.Do not call your file math.py. It may bite you later. Just trust me on that one.\nNotice how you can print more than one thing at a time if you put commas between the values you want to print? We can group computations using parentheses, just like in normal math. Try this:\nIn addition to the regular math operators, there are a few extra operators that we call comparison operators because they are used to compare two values, e.g. two numbers.\nTry this:\nAs you may have noticed running this code, comparing things using these operators we always produce either True or False. E.g. the following\nprints the value True, because 5 is actually smaller than 7. True and False are special values in Python that we can use (and print if we like) just like any other Python value:",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dealing with values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dealing_with_values.html#math",
    "href": "lecture_notes/chapters/python/dealing_with_values.html#math",
    "title": "Dealing with values",
    "section": "",
    "text": "Operator\nOperation\n\n\n\n\n+\nplus\n\n\n-\nminus\n\n\n/\ndivision\n\n\n//\ninteger division\n\n\n*\nmultiplication\n\n\n**\nexponentiation\n\n\n%\nmodulo (remainder)\n\n\n\n\nprint(\"Four times two is\",  4 * 2)\n\nprint(\"10 / (2 + 3) is\", 10 / (2 + 3))\nprint(\"(10 / 2) + 3 is\", (10 / 2) + 3)\n\n\n\n\nOperator\nOperation\n\n\n\n\n&lt;\nless-than\n\n\n&gt;\ngreater-than\n\n\n&lt;=\nless-than-or-equal\n\n\n&gt;=\ngreater-than-or-equal\n\n\n==\nequal\n\n\n!=\nnot equal\n\n\n\n\nprint(\"Is 5 greater than -2?\", 5 &gt; -2)\nprint(\"Is 5 greater or equal to -2?\", 5 &gt;= -2)\nprint(\"Is 5 less or equal to -2?\", 5 &lt;= -2)\nprint(\"Is 5 less than 7 - 2?\", 5 &lt; 7 - 2)\nprint(\"Is 5 equal to 7 - 2?\", 5 == 7 - 2)\n\nprint(5 &lt; 7)\n\nprint(True)\nprint(False)\n\nExercise\nTry to write and run the code below. Compare each line to what is printed when you run the code. Make sure you understand why.\nprint(\"I have\", 25 + 30 / 6, \"of someting\")\nprint(\"I have\", 100 - 25 * 3 % 4, \"of something else\")\n\nprint(\"Is it true that 3 + 2 &lt; 5 - 7?\")\nprint(3 + 2.1 &lt; 5.4 - 7)\n\nprint(\"3 + 2.1 is\", 3 + 2.1)\nprint(\"5.4 - 7 is\", 5.4 - 7)\n\nprint(\"Oh, that's why it's False.\")\n\n\nExercise\nThere is even an additional comparison operator that tests if something is a part of something else. That operator is called in. One use of it is to to test if one string is part of another string. Try this to figure out how it works:\nprint(\"Hell\" in \"Hello world\")\nprint(\"Hello world\" in \"Hello world\")\nprint(\"Hello world\" in \"Hell\")\nprint(\"lo wo\" in \"Hello world\")\nprint(\"Artichoke\" in \"Hello world\")\n\n\nExercise\nSay the supermarket has chocolate bars for 7 kr. Write a small Python program (in a file called chocolate.py) that prints how many chocolate bars you can get for your 30 kr. You should run it like this;\nFor example, it could output something like this:\n$ python chocolate.py\nto have it print something like this:\nI can buy 4.285714285714286 chocolate bars!\n\n\nExercise\nWe mentioned a special operator called modulo. Google it you do not remember what it does. How about integer division. Explain both to a fellow student (or to yourself out loud).\n\n\nExercise\nYou obviously cannot go buy 4.3 chocolate bars in a store. You will have to settle for 4. Can you change the program you made in @sec:chocolatebars to print the number of bars you can actually buy, and the change you then have left? Use the modulo and integer division operators. Somthing like:\nI can buy 4 chocolate bars leaving me with 2 kr in change\n\n\nExercise\nWhat happens if you try to run the following program?\nprint( 1 / 0 )\nIf you get an error? What kind of error? Why do you think you get that error? Does it make sense?\n\n\nExercise\nYou have probably know the Pythagorean theorem for computing the hypotenuse (the longest side) of a right-angled triangle. The Pythagorean theorem looks like this: \\(a^2 + b^2 = c^2\\). Here \\(c\\) is the length of the hypotenuse and \\(a\\) and \\(b\\) are the lengths of the two legs of the triangle. So if we have a triangle where \\(a = 5\\) and \\(b = 2\\) and we want to find \\(c^2\\) we can do this in Python:\nprint(\"The squared length of the hypotenuse is:\", 5**2 + 2**2)\n\n\nExercise\nHowever, we are rarely interested in the squared length of the hypotenuse. Can you modify the code you wrote in @sec:pythagoras so you compute \\(c\\) instead of \\(c^2\\)? Taking the square root of a number is the same as taking that number and exponentiating it to 0.5, so the square root of \\(x\\) is \\(x^{0.5}\\). Do you know of a Python operator that does exponentiation?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dealing with values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dealing_with_values.html#logic",
    "href": "lecture_notes/chapters/python/dealing_with_values.html#logic",
    "title": "Dealing with values",
    "section": "Logic",
    "text": "Logic\nNow you know how to use the comparison operstors to produce a True or False value. There are three additional operators that lets you express more elaborate “True/False” statements than with the comparison operators alone. These are the logical operators: and, or and not.\n\nExercise\nGo through the code below and see if you can figure out what each line does. Then write the code into your editor and run it to see what actually happens.\nprint(2 &lt; 3)\nprint(10 &lt; 12)\nprint(8 &gt; 100)\nprint(2 &lt; 3 and 10 &lt; 12)\nprint(8 &gt; 100 and 2 &lt; 3)\nprint(8 &gt; 100 or 2 &lt; 3)\nprint(not 8 &gt; 100 and 2 &lt; 3)\nprint(not 8 &gt; 100 and not 2 &gt; 3)\nDid it do what you expected? Can you explain each line?\n\n\nExercise\nWhen exposed to the operators and, or and not, some values are considered true and others are considered false. What happens when you put not in front of someting that is considered true or false? Decide what you think and why before you write the code and try it out.\nprint(not True)\nprint(not False)\nprint(not 0)\nprint(not -4)\nprint(not 0.0000000)\nprint(not 3.14159265359)\nprint(not \"apple\")\nprint(not \"\")\nFrom the code above, try to find out which values Python considers true and which it considers false. Can you come up with a rule?\n\n\nExercise\nThe logical operator and takes two values (the one to the left of the operator and the one to the right) and figures out whether both the left and the right expression is true. It actually boils down to this:\n\n\n\nLeft expression\n Right expression\n Result\n\n\n\n\nTrue\nTrue\n True\n\n\nTrue\n False\n False\n\n\nFalse\n True\n False\n\n\nFalse\nFalse\n False\n\n\n\nWrite some code to confirm that the table above is correct using Python. For example, to test the first case, do this:\nprint(True and True)\n\n\nExercise\nPython will not do any more work than absolutely necessary to find out if a logical expression is true or not. That means that, if the value left of and is considered false by Python, then there is no reason look at the right value, since it is already established that they are not both considered true. In this case the expression reduces to the left value. I.e. False and True reduces to False.\nIf the value left of and is considered true by Python, then Python needs to look at the right value too to establish if they are both considered true. In this case the expression reduces to the value on the right. I.e. True and False reduces to False.\nA rule-of-thumb is that the whole expression reduces to the last value that Python needs to consider to decide if the whole expression is true or flase. Use that rationale to explain to yourself how the two last combinations in @sec:and_rules are evaluated.\n\n\nExercise\nLike the and operator, the or operator also takes two values. However, the or operator tries to figure out whether one of the two values are true. Thus, the or operator boils down to this:\n\n\n\nLeft expression\n Right expression\n Result\n\n\n\n\nTrue\nTrue\n True\n\n\nTrue\n False\n True\n\n\nFalse\n True\n True\n\n\nFalse\nFalse\n False\n\n\n\nWrite some code to confirm that the table above is correct using Python. For example, to test the first case, do this:\nprint(True or True)\n\n\nExercise\nAs with the and operator, Python will not do any more work than absolutely necessary when evaluating an expression with ‘or’. So if the value left of or is considered true by Python, then there is no reason look at the right value, since it is already established that at least one of them are considered true. In this case the expression reduces to the left value. I.e. True or False reduces to True.\nIf the value left of or is considered false by Python, then Python stil needs to look at the right value to establish if at least one of them are considered true. In this case the expression reduces to the right value. I.e. False or True reduces to True.\nAgain, the whole expression reduces to the last value that Python needs to consider to decide if the whole expression is true or flase. Use that same rationale to explain to yourself how the two last combinations in @sec:or_rules are evaluated.\n\n\nExercise\nRemember what you learned in @sec:trueish_falseish about which values are considered true and which are considered false. Combine that with what you learned in @sec:and_rules and @sec:or_rules about what logical expressions reduce to and see if you can figure out what is printed below and why. Use the rule-of-thumb from @sec:logic_rule_of_thumb. Decide what you think before you write the code and try it out.\nprint(True and 4)\nprint(0 and 7)\nprint(-27 and 0.5)\nprint(42 and 0)\nprint(\"apple\" and \"orange\")\nprint(\"apple\" and \"\")\nprint(42 or 0)\nprint(\"apple\" and \"\")\nprint(\"apple\" or \"\")\nIf you where surprised what was printed, maybe go back and have a look at @sec:and_rules and @sec:or_rules again.\n\n\nExercise\nRecall the in operator from @sec:in_operator? There is also an operator called not in. I guess you can imagine what that tests. Try it out.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dealing with values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dealing_with_values.html#variables",
    "href": "lecture_notes/chapters/python/dealing_with_values.html#variables",
    "title": "Dealing with values",
    "section": "Variables",
    "text": "Variables\n\nBy now you probably feel the first signs of brain-overload. If you do not take breaks, your brain may overheat and explode - we have seen that happen. One of the nice things about the brain is that it works when you rest. Archiving and understanding a lot of new information takes time, and force-feeding your brain will not help. The last part of this chapter is very important so now might be a good time for a good long break.\n\nThis section is about variables and this is where the fun begins. A variable is basically a way of assigning a name to a value. 8700000 is just a value, but if we assign a name to it then it gets a special meaning:\nnumber_of_species = 8700000\nprint(number_of_species)\nIn this case, the variable number_of_species represents the estimated number of eukaryotic species on the planet, which is 8700000. So 8700000 is the value and “number_of_species” is the variable name. Write the code above into a file and run it. Notice how this lets us refer to the value using the variable name. What appears in the terminal when you do that? do you see number_of_species or 8700000?\nAs you can see in the small program above, one of two different things happens when a variable name appears in Python code:\n\nAssignment: When a variable name appears to the left of an equals sign, then a value is assigned to the variable. This is what happens in the first line where number_of_species is assigned the value 8700000.\nSubstitution: In all other contexts, the variable is substituted for its value. This is what happens in the second line where Python substitutes the variable name number_of_species for its value 8700000 and then prints that.\n\nThat is basically it, but let us take the example a bit further and create another variable that we assign the value 1200000 to. That is the number of species discovered so far. Now, lets add this to the program and use it to compute the number of species we have yet to identify. Start by reading the code below super carefully. Remember that a variable is either assigned a value or substituted for the value it represents. For each occurrence of the variables below, determine if they are being assigned a value or if they are substituted for their value.\nnumber_of_species = 8700000\nnumber_discovered = 1200000\nnumber_unidentified = number_of_species - number_discovered\nprint(number_unidentified)\nNow write the code into a file and run it. Take some time to let it sink in that variables are extremely useful for two reasons:\n\nVariables give meaning to a value. Without the variable name, the value 1200000 could just as well be the number of people that lives in Copenhagen. However, by giving the value a meaningful name, it becomes clear what the value is meant to represent.\nWe can assign new values to variables (that is why they are called variables). That way we can change the value of number_discovered as new species are discovered.\n\nYour variable names can be pretty much anything, but they have to start with a letter or an underscore (_) and the rest of the name has to be either letters, numbers or underscores. Just to be clear: a space is not any of those things, so do not use spaces in variable names. Above all, be careful in your choice of variable names. Variable names are case sensitive, meaning that count and Count are two different variables. Stick to lower case variable names. That makes your code easier to read.\n\nExercise\nFor each occurrence of the variables below, determine if they are being assigned a value or if they are substituted for their value.\nbreeding_birds = 4\nprint(breeding_birds)\nbreeding_birds = 5\nprint(breeding_birds)\n\n\nExercise\nFor each occurrence of the variables below, determine if they are being assigned a value or if they are substituted for their value.\nbreeding_birds = 4\nprint(breeding_birds)\nbreeding_birds = breeding_birds + 1\nprint(breeding_birds)\n\n\nExercise\nWhat happens if you take the first example in this section swap the two lines? So going from this:\nnumber_of_species = 8700000\nprint(number_of_species)\nto this:\nprint(number_of_species)\nnumber_of_species = 8700000\nExplain to yourself what happens in each line of each version of the program. What kind of error do you get with version two and why? Remember Oath 2!\n\n\nExercise\nWrite the following code in a file, save it and run it.\nincome = 45000\ntaxpercentage = 0.43\ntax_amount = tax_percentage * income\nincome_after_tax = income - tax_amount\nprint('Income after tax is', income_after_tax)\nYou should get an error that looks at lot like this one:\nTraceback (most recent call last):\n  File \"tax.py\", line 3, in &lt;module&gt;\n    tax_amount = tax_percentage * income\nNameError: name 'tax_percentage' is not defined\nIt says that the error is on line 3. Can you figure out what is wrong? Hopefully, you will now appreciate how much attention to detail is required when programming. Every tiny, little symbol or character in your code is essential.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dealing with values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dealing_with_values.html#different-types-of-values",
    "href": "lecture_notes/chapters/python/dealing_with_values.html#different-types-of-values",
    "title": "Dealing with values",
    "section": "Different types of values",
    "text": "Different types of values\nBy now you probably have a pretty good idea about what a value in Python is. So far you have seen text like 'Banana', integers like 7 and numbers with a fractional part like 4.25.\nIn Python, a text value is a type of value called a string which Python denotes str (abbreviation for “string”). So 'Banana' is a string, and so is 'Banana split'. There are two types of numbers in Python. Integers (like 7, 42, and 3) are called int. Numbers with a fractional part (like 3.1254 and 4.0) are that are called float (abbreviation for “floating-point number”).\nAs I mentioned earlier, True and False are Python values too. They are called booleans or bool, named after an English mathematician called George Boole famous for his work on logic.\nSo the different types of values we know so far are:\n\n\n\nName\nType in Python\nExamples\n\n\n\n\nString\nstr\n\"hello\", '9'\n\n\nInteger\nint\n0, 2721, 9\n\n\nFloating-point\nfloat\n1.0, 4.4322\n\n\nBoolean\nbool\nTrue, False\n\n\nNone\nNoneType\nNone\n\n\n\nIn case you did not notice, I added a special type at the end that can only have the value None. I may sound a little weird, but in programming, we sometimes need a value that represents nothing, or None. For now, just make a mental note that None is also a Python value.\nWhen you do computations in Python it is no problem to mix integers and floating-point numbers. Try this:\nprint(\"What is 0.5 * 2?\", 0.5 * 2)\nprint(\"What is 3 / 2?\", 3 / 2)\nAs you can see we can also make computations using only integers that result in floating-point numbers.\nSome of the math operators not only work on numbers, they also work on strings. That way you can add two strings together. It is no longer math of course - but quite handy.\nfruit = 'Ba' + 'na' + 'na'\nprint(fruit)\n\nExercise\nIf you try to combine different types of values in ways that are not allowed in Python, you will get an error. Try each of the following weird calculations in turn, and read the each error message carefully.\nx = 3 - '1.5'\nprint(x)\nx = None - 4\nprint(x)\n\n\nExercise\nWrite these two examples and compare the resulting values of x\nx = '9' + '4'\nprint(x)\nx = 9 + 4\nprint(x)\n\n\nExercise\nTry these two examples. What happens in each case? Does it make sense?\nx = '72' * 3\nx = '72' * '3'\n\n\nExercise\nWill this work? Use what you have learned from the other exercises and try to predict what will happen here. Then write the code and try it out.\nx = 'Ba' + 'na' * 2\nprint(x)\n\n\nExercise\nSometimes you may need to change a string to a number. You can do that like this:\nsome_value = \"42\"\nother_value = int(some_value)\nWrite some code that converts strings to numbers and numbers to strings. Remember that numeric values are either integers or floats. Use int, float as in the example above. You will notice that only meaningful conversions work. E.g. this will not work: number = int('four'). To convert a number to a string you can use str\nHaving completed the above exercises you should take note of the following four important points:\n\nAll Python values have a type. So far you know about strings, integers, floating-points, and booleans.\nMath operators let you do cool things like concatenating two strings by adding them together.\nThe flip side of that cool coin is that Python will assume you know what you are doing if you add two strings ('4' + '4' is '44' not 8) or multiply a string with an integer ('4' * 4 is '4444' not 16).\nYou can change the type of a value. E.g '4' to 4 or 1 to 1.0.\nPython will throw a TypeError if you try to combine types values of values in ways that are not allowed.\n\n\nEscape characters: An escape character is a backslash \\ followed by a single character. In Python, the most commonly used ones are \\n and \\t.\n\n\n\nExercise\nWhat do you think is printed here?\nmain_course = 'Duck a la Banana\\n'\ndessert = 'Banana split\\n'\nmenu = main_course + dessert\nprint(menu)\nCan you figure out what the special character \\n represents?\n\n\nExercise\nWhat do you think is printed here?\n\ndish_one = 'Banana\\t\\tsplit'\ndish_two = 'Chocolate\\tcake'\nprint(dish_one)\nprint(dish_two)\nCan you figure out what the special character \\t represents?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dealing with values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dealing_with_values.html#mixed-exercises",
    "href": "lecture_notes/chapters/python/dealing_with_values.html#mixed-exercises",
    "title": "Dealing with values",
    "section": "Mixed exercises",
    "text": "Mixed exercises\nEach chapter in the book ends with a set of mixed exercises that are ment to give you an opportunity to combine what you have learned so far. In this case, they are meant to train your familiarity with the following topics:\n\nStrings\nMath\nLogic\nTypes of values\nVariables\n\n\nExercise\nWhat happens if you try to run the following program?\nprint(\"What happens now?\", 1 / )\nIf you get an error, why do you think you get that error?\n\n\nExercise\nWhat happens if you try to run the following program?\nprint(\"What happens now?\", 1 / 3\nIf you get an error, why do you think you get that error? Can you fix it? (Hint: EOF is short for End Of File)\n\n\nExercise\nDetermine, for each or the eight occurrences of the variable x below, where it is being assigned a value and when it is substituted for its value:\nx = 1\nx = x + 1\nx = x + 1\nx = x + 1\nprint(x)\nThen figure out what is printed and why (remember oath 2). What value does x represent at each occurrence in the code?\n\n\nExercise\nSome comparison operators also work with strings. Consider this code:\nprint(\"apples\" == \"pears\")\nWhat is printed here? Write the code and see for yourself once you think you know. If you were wrong, make sure you understand why.\n\n\nExercise\nConsider this code:\nprint('aaaaaa' &lt; 'b')\nprint('a' &lt; 'b')\nprint('aa' &lt; 'ab')\nprint('99' &gt; '100')\nprint('four bananas' &gt; 'one banana')\nWhat is printed here? Write the code and see for yourself once you think you know. By what rule does Python decide if one string is smaller than an other? If you have looked something up in an encyclopedia recently, you may have a clue. Also try to google “ASCII table”.\n\n\nExercise\nConsider this code:\nprint('banana' &lt; 'Banana')\nWhat is printed here? Write the code and see for yourself once you think you know.\n\n\nExercise\nDo you think it is allowed to use relational operators on values of different types? Try these out and see for yourself:\nprint('Banana' &gt; 4)\nprint('42' == 43) # this one is dangerous...\nprint(4 in '1234')\nPractice reading this kind of error (TypeError).\n\n\nExercise\nCan you use the in operator to test if this mini gene is part of the DNA string?\nmini_gene = 'ATGTAG'\ndna_string = 'GCTATGTAGGTA'\n\n\nExercise\nSay you have two strings \"4\" and \"2\". What happens if you add them like this: \"4\" + \"2\". Can you convert each one to integers so you get 6 when you add them? (have a look at @sec:type_conversion if you do not remember).\n\n\nExercise\nWhat happens if you run this code? Do you get an error? Do you remember why?\n1value = 42\n\n\nExercise\nWhat happens if you run this code?\nprint('Hi')\nprint('Hi')\nprint('Hi')\nCompare to what happens when you run this code:\nprint('Hi\\nHi\\nHi')\nDo you remember what \\n represents? What does it tell about what is added at the end every time you print something?\n\n\nExercise\nMake three exerices for your fellow students. See if you can make them so they test the understanding of (almost) all you have learned so far.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Dealing with values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/the_order_of_events.html",
    "href": "lecture_notes/chapters/python/the_order_of_events.html",
    "title": "The order of events",
    "section": "",
    "text": "Precedence of Operators\nFear not. Precedence is just a nasty word for something we have already talked about. Precedence simply specifies that some things are done before other things – or more correctly, that some operations are performed before others. You already know that multiplication is done before addition. Another way of saying that is that multiplication takes precedence over addition. The expression below obviously reduces to 7 in two steps:\n\\[ 1 + 3 * 2 \\]\nFirst, \\(3 * 2\\) reduces to 6 and then \\(1 + 6\\) reduces to 7. If we wanted to add 1 and 3 first we would need to enforce this by adding parentheses:\n\\[ (1 + 3) * 2 \\]\nThis is because the multiplication operator (*) has higher precedence than the addition operator (+). Here is the list of the most common operators and their precedence in Python:\nSometimes a statement contains adjacent operators with the same precedence. In this case Python evaluates the expression left to right. I.e. This following expression first reduces to \\(0.5 * 2\\) and then to \\(1\\)\nThe following one first reduces to \\(1 * 4\\) and then to \\(4\\):\nIf you want Python order the oprations in any other way, you need to use perentheses (E.g. 2 / (2 * 4)).",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>The order of events</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/the_order_of_events.html#precedence-of-operators",
    "href": "lecture_notes/chapters/python/the_order_of_events.html#precedence-of-operators",
    "title": "The order of events",
    "section": "",
    "text": "Level\nCategory\nOperators\n\n\n\n\nHighest\nexponent\n**\n\n\n\npositive / negative\n+x, -x\n\n\n\nmultiplication\n*, /, //, %\n\n\n\naddition\n+, -\n\n\n\nrelational\n!=, ==, &lt;=, &gt;=, &lt;, &gt;, in, not in\n\n\n\nlogical\nnot\n\n\n\nlogical\nand\n\n\nLowest\nlogical\nor\n\n\n\n\n2 / 4 * 2\n\n2 / 2 * 4\n\n\nExercise\nLook at each expression in the exercises below and use the table above to decide if it evaluates to True or False. Then write the code and test if you were right. If not figure out why.\n2 + 4 * 7 == 2 + (4 * 7) \n\n\nExercise\nDoes this reduce to True or False?\n4 &gt; 3 and 2 &lt; 1 or 7 &gt; 2\n\n\nExercise\nDoes this reduce to True or False?\n4 &gt; 3 and (2 &lt; 1 or 7 &gt; 2)\n\n\nExercise\nDoes this reduce to True or False?\n2 * 4 ** 4 + 1 == (2 * 4) ** (4 + 1)",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>The order of events</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/the_order_of_events.html#statements-and-expressions",
    "href": "lecture_notes/chapters/python/the_order_of_events.html#statements-and-expressions",
    "title": "The order of events",
    "section": "Statements and Expressions",
    "text": "Statements and Expressions\nTo be able to talk concisely about programming (and to receive more useful help from your instructors) you need a bit of vocabulary. Statements and expressions are two such words that you need to know. Distinguishing between statements and expressions will help us talk about the code we write.\n\nA statement is a line of code that performs an action. Python evaluates each statement in turn until it reaches the end of the file (remember oath 2?). print(y * 7) is a statement and so is x = 14. They each represent a full line of code and they each perform an action.\nAn expression is any piece of code that reduces to one value. y * 7 is an expression and so is y * 7 + 14 - x and 4 &gt; 5.\n\nWe will talk more about how expressions are handled by Python in the next section, but right now it is important that you understand that statements do something while expressions are things that reduces to a value. Hopefully, this distinction will be clearer when you have completed the following exercises.\n\nExercise\nDid you notice in the above examples that print(y * 7) is a statement and y * 7 is an expression? Yes, expressions can be part of statements. In fact they most often are. Similarly, expressions are often made up of other smaller expressions. E.g. y * 7 is part of the larger expression y * 7 + 14 - x.\nTake a look at this code:\nx = 5\ny = 20\nz = (x + y) / 2 + 20\nprint(z * 2 + 1)\nh = 2 * x - 9 * 48\nprint(h)\nWrite down the code on a piece of paper. Now mark all statements and all expressions. Remember that expression are often made up of smaller expressions, so you can find a lot of them. E.g. (x + y), 2 + 20, and (x + y) / 2 + 20 are all expressions. In fact, a single variable (like x) is also a small expression. Discuss with a fellow student. Do you agree on what find?\n\n\nExercise\nConsider the following code:\ngreeting = 'Hello' + ' my '\nprint(greeting + 'friend')\nHow many statements are there in this piece of code? How many expressions?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>The order of events</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/the_order_of_events.html#substitution-and-reduction",
    "href": "lecture_notes/chapters/python/the_order_of_events.html#substitution-and-reduction",
    "title": "The order of events",
    "section": "Substitution and Reduction",
    "text": "Substitution and Reduction\nAlthough substitution and reduction may not sound like your new best friends, they truly are! If you remember to think about your Python code in terms of substitution and reduction, then programming will make a lot of sense. Understanding and using these simple rules you will allow to read and understand any code. If you do not, you may get by for a while - only to find yourself in big big trouble later when things start to become more complicated.\nYou should remember, from the section on variables in the previous chapter, that variables in Python in are either assigned a value or substituted for the value they represent.\nIn the first two lines of code below, the variables x and y are each assigned a value. Now consider the last line in the example:\nx = 4\ny = 3\nz = x * y + 8\nHere x is substituted by the value 4 and y is substituted by the value 3. So now the expression after the equals sign reads 4 * 3 + 8. Because we multiply before we add, 4 * 3 reduces to 12 so that the expression now reads 12 + 8. Finally, this reduces to the value 20. The very last thing that happens is that the variable z is assigned the value 20.\nYou should do these steps every time you see an expression. You may think that this is overdoing things a bit, but it is not. This kind of explicit thinking is what programming is all about and it will become increasingly important as the course progresses. So make sure you make it a habit while it still seems trivial. Then, over time, it will become second nature.\nNow raise your right hand and read the third and last oath out loud:\n\nOath 3: I hereby solemnly swear to consciously consider every single substitution and reduction in every Python expression that I read or write from this moment on.\n\nThis was the last of the three oaths but it is by far the most important one. You can take your hand down now.\nNB: You may not realize at this point, but the last two subsections are the most important ones in the book. Go back and read them many times as you proceed through the course. If you explicitly think in terms of substitution and reduction you will have no trouble. If you do not, you are entering a mine field with snowshoes on.\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by inserting a print statement at the end.\nx = 7\ny = 4 + x\n2 + x * x**2 + y - x\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\na = 4\nb = a\nc = 2\nc = a + b + c\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nx = 1\nx = x\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nmicrosatellite = \"GTC\" * 41\nSurprised?\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nmini_gene = \"ATG\" + \"GCG\" + \"TAA\"\nWhat did you do first here? Does the order of additions matter? What operations do Python perform first when operators have same precedence? (left to right, or right to left)\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nnumber = 1 / 1 * 4\nIn what order are reductions made? Does the order of operations matter, and in what order does Python do the reductions?\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nx = 4\ny = x + x\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nx = 4\nx = x + 1\n\n\nExercise\nDo the substitution and reduction steps with pen and paper, then run it to check yourself by iserting a print statement at the end.\nx = 4\nx += 1\nCompare the final value of x to that in @sec:adding_one. Can you see what += is a short hand for? Nifty, right?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>The order of events</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/the_order_of_events.html#general-exercises",
    "href": "lecture_notes/chapters/python/the_order_of_events.html#general-exercises",
    "title": "The order of events",
    "section": "General exercises",
    "text": "General exercises\nThe following exercises are meant to train your familiarity with the topics we have treated so far – in this case especially:\n\nSubstitution\nReduction\nAssignment\nSimple precedence rules\nComparison operators\nLogical operators\nDistinction between text and numbers\n\nRead each exercise and think hard about the questions before you code anything. Then write the code and try it out. Remember that it is crucial that you type it in – as super boring as it may be (remember oath one). This trains your accuracy and attention to detail and it builds programming into your brain. Play around with each bit of code. Make small changes and see how it behaves.\nThere is a reason why there are lots of questions in this exercise but no answers. You are supposed to find them yourself – also if it takes you quite a while. That is the way you build understanding. Some of the questions may seem trivial but do them anyway. If you only understand these concepts superficially they will come back and bite you in the ass when things get more complicated.\n\nExercise\nConsider this code:\n1.2 * 3 + 4 / 5.2\nWhat does that expression evaluate to? Try to explicitly make all the reductions on a piece of paper before you write and run the code.\n\n\nExercise\nConsider this code:\n1.2 * (3 + 4) / 5.2\nWhat does that expression evaluate to? Try to explicitly make all the reductions on a piece of paper before you write and run the code.\n\n\nExercise\nConsider this code:\n10 % 3 - 2\nWhat does that expression evaluate to? Try to explicitly make all the reductions on a piece of paper before you write and run the code.\n\n\nExercise\nConsider this code:\n11 % (7 - 5)**2\nWhat does that expression evaluate to? Try to explicitly make all the reductions on a piece of paper before you write and run the code.\n\n\nExercise\nConsider this code:\na = 5\nx = 9\nbanana = 7\nx + 4 * a &gt; banana\nWhat does the last expression evaluate to? Try to explicitly make all the substitutions and reductions on a piece of paper before you write the code. What happens if you write and run the code? Why?\n\n\nExercise\nConsider this code:\ndance = 'can'\ndance = dance + dance\nprint(\"Do the\", dance)\nWhat is printed? Try to explicitly make all the substitutions and reductions on a piece of paper before you write the code. What happens if you write and run the code? Why?\n\n\nExercise\nConsider this code:\nfoo = 30\nbar = 50\nbaz = bar + foo\nprint(baz)\nbar = 10\nprint(baz)\nThere are two print statements. The first print statement prints 80. But what about the second print statement? Does that print 80 or 40? Find out and make sure you understand why it prints what it prints. If not, reread the section on subsitution.\n\n\nExercise\nConsider this code:\n1 == '1'\nand this:\n1 == 1.0\nWhat does this reduce to? Try to print it and see once you think you know. If you were wrong, make sure you figure out why.\n\n\nExercise\nConsider this code:\na = '1'\nb = '2'\nc  = a + b\nprint(a, b, c)\nprint(a + b == 3)\nWhat is printed here? Write the code and see for yourself once you think you know. If you were wrong, make sure you understand why.\n\n\nExercise\nConsider this code:\na = 1\nb = 2\nc  = a + b\nprint(a, b, c)\nprint(a + b == 3)\nWhat is printed here? Compare to @sec:string_gotcha1. Write the code and see for yourself once you think you know. If you were wrong, make sure you understand why.\n\n\nExercise\nConsider this code:\nx = 4\nprint(x + 2 and 7)\nprint(x + 2 or 7)\nx = -2\nprint(x + 2 and 7)\nprint(x + 2 or 7)\nWhat is printed here? Write the code and see for yourself once you think you know. If you were wrong, make sure you understand why.\n\n\nExercise {#sec:puzzle)\nIn the code below I have shuffled the statements. Put them in the right order to make the code print 100.\nx = x + 4\nprint(x)\nx = x * 5\nx = x * x\nx = 4\n\n\nExercise\nIn the code below I have shuffled the statements. Put them in the right order to make the code print the string \"Banana\".\ny = 'n'\nx = 'B' + y + x\nprint(x)\nx = 'a'\ny = (x + y) * 2\n\n\nExercise\nMake a puzzle exericise, like the two previous ones, for a fellow student.\n\n\nExercise\nRemind yourself of the different types of Python values you know. E.g. one of them is integer (int). Make a list.\n\n\nExercise\nYou already know about several types of data values in Python. Two of them are integers called int, and decimal numbers (or floating points) called float. When you use an operator like + or &gt; it produces a value. No matter what you put on either side of &gt; in it produces a boolean value (bool), True or False. For other operators the type of value produced depends on which values the operator works on. Try this and see if you print an integer or a float (8 or 8.0):\nx = 4\ny = 2\nresult = x * y\nprint(result)\nNow try to replace 4 with 4.0. What type is result now?. Try to also replace 2 with 2.0. What type is result now? Can you extract a rule for what the * operator produces depending on the what types the two values have?\n\n\nExercise\nIn @sec:type_coercion you investigated what types of values the * operator produce. Redo that exercise with the operators: +, -, /, **, //, and %. What are the rules for what is returned if both values are integers, one value is a float, or both values are floats?\n\n\nExercise\nMake a list of all the operators you know so far in order of precedence (without looking in the notes). Then check yourself.\n\n\nExercise\nWhat does his expression reduce to and what type of value is it?\n3 &gt; 2\n\n\nExercise\nWhat does his expression reduce to and what type of value is it? Do all the reduction steps in your head.\n2 - 4 * 5 - 2 * 1/3\n\n\nExercise\nWhat does his expression reduce to and what type of value is it? Do all the reduction steps in your head.\n3 &gt; 2 and 2 - 4 * 5 - 2 * 9\n\n\nExercise\nWhat is printed here and why?:\nprint(True and \"banana\" or \"orange\")\nTry to change the True value to False and see what happens. Can you explain it? If not look at @sec:logic_rule_of_thumb again.\n\n\nExercise\nWhat does his expression reduce to? Do all the reduction steps in your head.\n0 and 1 or 2\n\n\nExercise\nWhat does his expression reduce to? Do all the reduction steps in your head.\n4 and 1 or 2\n\n\nExercise\nIf you understood @sec:oneline_ifelse, then you should also understand this one:\nweather = 'rain'\nwhat_to_do = weather == 'rain' and 'watch movies' or 'go swimming'\nprint(what_to_do)\nWhat happens if you change 'rain' in the first line to something else (like 'sun')?\n\n\nExercise\nWhat is the value of results once the code below has run? Do the substitutions, reductions, and assignments in your head before you run the code.\nx = 7\ny = 13\nz = x + y\nx = 0\nresult = x + y + z\n\n\nExercise\nWhat is the value of results once the code below has run? Do the substitutions, reductions, and assignments in your head before you run the code.\nx = 5\ny = x + 1\nx = y + 1\ny = x + 1\nresult = x + y\n\n\nExercise\nIn the code below I have shuffled the statements. Put them in the right order to make the code print 9. To do that you must think about which values each variable will in each statement depending on the how you order the statements.\nx = x + 1\ny = 5\ny = y - 1\nprint(y)\nx = 1\ny = y * x\n\n\nExercise\nIn the code below I have shuffled the statements. Put them in the right order to make the code print 'Mogens'\nc = b\nprint(c)\na = b + a\nb = 'og'\nb = c + a\nc = 'M'\na = 'ens'\n\n\nExercise\nMake three exercises that requires the knowledge of programming so far. Have your fellow students solve them.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>The order of events</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/course_tools.html",
    "href": "lecture_notes/chapters/python/course_tools.html",
    "title": "Course tools",
    "section": "",
    "text": "Wax on, wax off\nSeeing the sequence of substitutions and reductions in a Python expression will become natural over time. Until it does, you are in troubled waters, and if you do not practice in time, you may only realize this too late. Considering how simple this is to practice and how crucial it is to your progress, I have written a small companion program called myiagi where you can train this particular skill daily. The program is installed in the conda environment you created for this source, so make sure it is activated as described. To run the program, you execute this command in the terminal:\nIt should look like [@fig:myiagi], and the simple game is as follows. The program generates a Python expression. From that expression, it then performs all the substitution and reduction steps. Each substitution or reduction results in an intermediate expression until only a single Python value remains. Here is an example where the expression is 4 * y + x and the value it reduces to is 37:\nYou do not know what values the y and x variables point to, but you can deduce it from the sequence of expressions that they are 24 and 13. In the game, you are given a series of numbered expressions in the wrong order like this:\nYour task is to put them in the right order so that the original expression is at the top and the single Python value it reduces to is at the bottom. Now, you might grab line 2 by tabbing 2 on your keyboard (the number turns red so you can see it is active). Then, you move the line using the up/down arrow keys. If you move it to the bottom, the list then looks like this:\nNow, you repeat this process until the order is correct (the program will let you know when it is). The fewer lines you grab to produce the right order, the more points you earn. Problems with longer lists of expressions also earn you more points. As problems become harder and include more aspects of Python, solving them also awards more points. Each week has a score goal to guide your effort. Reaching this goal ensures that you practice as much as you should. Practicing a bit every day daily is more effective than practicing a lot a few days a week. To provide an incentive, the points you earn slowly expire, so the easiest way to maintain your score is to practice a bit every day.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Course tools</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/course_tools.html#wax-on-wax-off",
    "href": "lecture_notes/chapters/python/course_tools.html#wax-on-wax-off",
    "title": "Course tools",
    "section": "",
    "text": "Mr. Miyagi: First, wash all car. Then wax. Wax on…\nDaniel: Hey, why do I have to…?\nMr. Miyagi: Ah ah! Remember deal! No questions!\nDaniel: Yeah, but…\nMr. Miyagi: Hai! Wax on, right hand. Wax off, left hand. Wax on, wax off. Breathe in through nose, out of mouth. Wax on, wax off. Don’t forget to breathe, very important. [walks away, still making circular motions with hands] Wax on… wax off. Wax on… wax off.\n\n\nmyiagi\n\n\n\nVisual Studio Code (VScode)\n\n\n\n1.   4 * y + x\n2.   4 * 8 + x\n3.   24 + x\n4.   24 + 13\n5.   37\n\n1.   4 * y + x\n2.   37\n3.   4 * 8 + x\n4.   24 + x\n5.   24 + 13\n\n1.   4 * y + x\n2.   4 * 8 + x\n3.   24 + x\n4.   24 + 13\n5.   37",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Course tools</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/course_tools.html#a-helping-hand",
    "href": "lecture_notes/chapters/python/course_tools.html#a-helping-hand",
    "title": "Course tools",
    "section": "A helping hand",
    "text": "A helping hand\nUsing the myiagi, you train your ability to read and understand Python expressions. Seeing a similar breakdown of a Python expression in your code may also be helpful. For that purpose, I have written another tool called print-steps. Say you have some code like the one below and need clarification on how the single value assigned to z is produced (here, you are probably not).\nx = 7\ny = 5\nz = x * y + 4\nAll you need to do is then to add # PRINT STEPS comment to the end of the line like this:\nx = 7\ny = 5\nz = x * y + 4 # PRINT STEPS\nSay your file is called myfile.py, you would normally run the code like this:\npython myfile.py\nBut to see the breakdown of expressions marked by # PRINT STEPS, you need to run your code with the print-steps program instead:\nprint-steps myfile.py\nThe command prints the following in the terminal:\nLine 4 in test_studentfile.py:\nAs written:      z = x * y + 4\nSubstitution:    z = 7 * y + 4\nSubstitution:    z = 7 * 5 + 4\nReduction:       z = 35 + 4\nReduction:       z = 39\nYou can even mark more than one line like this and have print-steps break down all of them for you:\nx = 7\ny = 5\nz = x * y + 4 # PRINT STEPS\nk = z * 42 # PRINT STEPS\nlike this:\nLine 3 in myfile.py:\nAs written:      z = x * y + 4\nSubstitution:    z = 7 * y + 4\nSubstitution:    z = 7 * 5 + 4\nReduction:       z = 35 + 4\nReduction:       z = 39\n\nLine 4 in myfile.py:\nAs written:      k = z * 42\nSubstitution:    k = 39 * 42\nReduction:       k = 1638\nHowever, it would be best if you used this helping hand sparingly. It is much better to train your ability to do this in your head with the help of Mr. Myagi. Trust me, it works.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Course tools</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/controlling_behavior.html",
    "href": "lecture_notes/chapters/python/controlling_behavior.html",
    "title": "Controlling behavior",
    "section": "",
    "text": "If-statement\nThe small programs you have written so far all run the exact same sequence of statements (lines). Imagine if you could control which statements were run depending on the circumstances. Then you would be able to write more flexible and useful programs. Cue the music - and let me introduce: the “if-statement”.\nWrite the following carefully into a file. It is a small program to monitor bus passenger status. Notice the colon ending the if-statements. Also, note that the lines below each if-statement are indented with exactly four spaces. While you write the program, try to figure out what the if-statement does. Then run the code and see what happens.\nTry to change the values of bus_seats, passengers and bags and see how execution of the program changes.\nYou have probably realized that the if-statements control which print-statements that are evaluated. A statement nested under an if-statement is only evaluated if the expression between the if keyword and the : reduces to a value Python considers as true. This does not happen if the expression between the if and : reduces to a value Python considers false.\nRemind yourself that when asked to evaluate something as true or false, Python will interpret zero and empty values (like 0 and '') as False and all other non-zero and non-empty values as True.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Controlling behavior</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/controlling_behavior.html#if-statement",
    "href": "lecture_notes/chapters/python/controlling_behavior.html#if-statement",
    "title": "Controlling behavior",
    "section": "",
    "text": "bus_seats = 32\npassengers = 20\nbags = 20\n\nprint(passengers, \"people ride the bus\")\n\nif bus_seats &gt;= passengers + bags:\n    print(\"Smiles, everyone has room for bags\")\n\nif bus_seats &gt;= passengers:\n    print('Everyone gets to sit down, no complaints')\n\nif bus_seats &lt; passengers:\n    print('Some passengers standing, annoyed')\n    \nif bus_seats &lt; passengers / 3:\n    print(\"General dissatisfaction, some swearing too\")\n\n\n\n\nExercise\nWhich of the following letters are printed: A, B, C, D, E, F, G. Make up your mind before you write and run the code.\nif 0:\n    print('A')\n\nif \"Banana\":\n    print('B')\n\nif 3.14159265359:\n    print('C')\n\nif False:\n    print('D')\n\nif 9 &gt; 5 and 4 &lt; 7:\n    print('E')\n\nif '':\n    print('F')\n\nif False or \"banana\":\n    print('G')\n\n\nExercise\nWhat happens if you forget to write the : in the if-statement?\nif 4 &gt; 2\n    print('Hi!')\n\n\nExercise\nWhat happens if you do not indent the code under the if-statement?\nif 4 &gt; 2:\nprint('Hi!')\n\nBy now you have probably know that your text editor is intelligent when it comes to indentation. If you hit Enter after a statement ending with :, it will indent the next line with four spaces. Also, if you use the tab in python code, it will produce four spaces for you.\n\n\n\nFAQ\nQ: Isn’t “If” a poem by Rudyard Kipling?\nA: Yes.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Controlling behavior</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/controlling_behavior.html#else-statement",
    "href": "lecture_notes/chapters/python/controlling_behavior.html#else-statement",
    "title": "Controlling behavior",
    "section": "Else-statement",
    "text": "Else-statement\nSometimes you not only want your program to do something if an expression reduces to True, you also want it to do something else if it is False. It is as simple as it looks:\ncookies = 3\n\nif cookies &gt; 0:\n    print(\"Uh, I wonder if we have some milk too...\")\nelse:\n    print(\"Sigh!\")\nRemember to put a : after the else keyword. Write the code and change the value of cookies to 0.\n\nExercise\nTest your understanding about which expressions that reduce to a True or False value. Write the code below and then see how it responds to different values of x. Try to come up with other variations yourself.\nx = 0.0\n# x = '0'\n# x = '   '\n# x = ''\n# x = not 0\n# x = 'zero'\n\nif x:\n    print('x is substituted with True in the if-statement')\nelse:\n    print('x is substituted with False in the if-statement')\n\n\nFAQ\nQ: Isn’t “Else” a poem by Rudyard Kipling?\nA: No.\n\nExercise\nWhat do you think this code prints? Notice how you can nest if and else-statements under other if and else-statements. This way you can make your program only include some statements when certain combinations of conditions are met. Just remember that the code below each if or else is indented by four spaces. Try to change the True/False values of milk and cookies.\nmilk = False\ncookies = True\nif milk:\n    if cookies:\n        status = 'Good times!'\n    else:\n        status = 'Not thirsty, thanks or asking'\nelse:\n    if cookies:\n        status = 'How does something like this happen?'\n    else:\n        status = 'Whatever...'\n        \nprint(status)",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Controlling behavior</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/controlling_behavior.html#blocks-of-code",
    "href": "lecture_notes/chapters/python/controlling_behavior.html#blocks-of-code",
    "title": "Controlling behavior",
    "section": "Blocks of code",
    "text": "Blocks of code\nIn the examples above, some lines are indented more than others, and you probably already have some idea of how this is interpreted by Python. Indentation defines blocks of code. Whether each block of code is evaluated when your code runs, is controlled by the if and else statements. The following three rules define individual blocks of code:\n\nAll statements in a block of code have the same indentation. That is, they line up vertically.\nA block of code begins at the first line of code at a line that is indented more than the one before it.\nA block ends when it is followed by a line that is less indented, or at the last line of code.\n\nThis way, a block can be nested inside another block by indenting it further to the right as shown in [@fig:blocks]. Compare the example in [@fig:blocks] to the code example above. Note how a colon at the end of a statement means “this applies the block of code below”. Make sure you understand which print statements that are controlled by which if and else statements.\n\n\n\nThe amount of indentation defines blocks of code",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Controlling behavior</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/controlling_behavior.html#elif-statement",
    "href": "lecture_notes/chapters/python/controlling_behavior.html#elif-statement",
    "title": "Controlling behavior",
    "section": "Elif-statement",
    "text": "Elif-statement\nSay you need to test a number of mutually exclusive scenarios. E.g. if a base is equal to A, T, C or G. You can do that like in the example below, but it is very verbose and shifts your code further and further to the right.\nbase = 'G'\n\nif base == 'A':\n    print('This is adenine')\nelse:\n    if base == 'T':\n        print('This is thymine')\n    else:\n        if base == 'C':\n            print('This is cytosine')\n        else:\n            print('This is guanine')\nThis is where an elif statement can be helpful. It is basically short for “else if”. If you compare to the example below the correspondence is hopefully obvious.\nbase = 'G'\n\nif base == 'A':\n    print('This is adenine')\nelif base == 'T':\n    print('This is thymine')\nelif base == 'C':\n    print('This is cytosine')\nelse:\n    print('This is guanine')\nHere we put an else-statement at the end to capture all cases not covered by the if-statement and the two elif-statements.\n\nExercise\nYou can use logical operators (and, or, not) in the expressions tested in an if-statement. Can you change the program from @sec:nested_if_else so that there are no nested if-statements - in a way so the program still does exactly the same? You can use if, elif and else and test if e.g. both milk and cookies are true using and.\n\n\nExercise\nIn the snippet of code below there are three blocks with three statements in each. Which statements belong to which block? Which statements are executed?\nx = 5\nif x &gt; 4:\n    y = 3\n    if x &lt; 1:\n        x = 2\n        y = 7\n        z = 1\n    x = 1\nz = 4\n\n\nExercise\nCan you see four blocks of code? If not, read the three rules above again. Which statements are executed?\nx = 5\nif x &gt; 4:\n    y = 3\n    if x &lt; 1:\n        x = 2\n        y = 7\n    else:\n        x = 1\n        y = 9\nz = 4",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Controlling behavior</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/controlling_behavior.html#general-exercises",
    "href": "lecture_notes/chapters/python/controlling_behavior.html#general-exercises",
    "title": "Controlling behavior",
    "section": "General exercises",
    "text": "General exercises\n\nExercise\nWill this print You are a super star!?\nif -4 and 0 or 'banana' and not False:\n    print(\"You are a super star!\")\n\n\nExercise\nWill this print You are a super star!?\nif -1 + 16 % 5 == 0 :\n    print(\"You are a super star!\")\n\n\nExercise\nAssign values to two variables x and y. Then write some code that prints OK if and only if x is smaller than five and y is larger than five. Do it using two if statements:\nx = 3 # or someting else\ny = 7 # or someting else\n\n# rest of code here...\nNow solve the same problem using only one if statement.\n\n\nExercise\nAssign values to two variables x and y. Then write some code that prints OK if and only if x is smaller than five or y is larger than five. Do it using two if statements:\nx = 3 # or someting else\n7 = 7 # or someting else\n\n# rest of code here...\nNow solve the same problem using only one if statement and one elif statement.\n\n\nExercise\nAssign values to two variables x and y. Then write some code that prints OK if either x or y is zero, but not if both are zero (this is tricky one).\nx = 3 # or someting else\ny = 7 # or someting else\n\n# rest of code here...\n\n\nExercise\nWhich value of x makes the code below print Banana?\nx = \ns = ''\nif x**2 == 16:\n    s = s + 'Ba'\nif x + 6 == 2:\n    s = s + 'na'\nif 7 == x - 3:\n    s = 'na' * 2\nelse:\n    s = s + 'na'\nprint(s)\n\n\n\nExercise\nMake three exercises that requires the knowledge of programming so far. Have your fellow students solve them.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Controlling behavior</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/organizing_your_code.html",
    "href": "lecture_notes/chapters/python/organizing_your_code.html",
    "title": "Organising your code",
    "section": "",
    "text": "Functions\nBuckle down for the most powerful and useful thing in programming. Functions! Functions serve as mini-programs that perform small well-defined tasks in your program.\nI have started to write a song about functions:\nI am going to add a lot more verses and I do not want to have to write the entire chorus every time. So what would be more natural than to make a function named chorus that takes care of that for us? That way we can write our song the way lyrics with a chorus are usually written:\nFirst, let us break down the function definition in the top part of this code:\nWhen Python runs this code, each line is executed one by one starting from the first line (remember oath two?). So in this case python first executes the definition of the chorus function. The only thing that has happened after Python has executed the first five lines of code is that it has assigned the name chorus to the four indented statements. So Python now “knows” about the chorus function (like it “knows” about a variable x after we do x = 4).\nTo use the function, we “call” it by writing its name followed by parentheses: chorus(). When it comes to functions, “use”, “call” and “run” means the same thing. As you can see, we call the function twice in the rest of the code. Each time we do, the following happens:\nSo the key properties of functions are:",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Organising your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/organizing_your_code.html#functions",
    "href": "lecture_notes/chapters/python/organizing_your_code.html#functions",
    "title": "Organising your code",
    "section": "",
    "text": "print(\"Functions are super, Functions are cool\")\nprint(\"When writing a program they are a great tool\")\nprint(\"La la dim du da da di\")\nprint(\"Skubi dubi dumdi di\")\nprint(\"Bing di dubi dum da di\")\n\nprint(\"Functions are used to package some code\")\nprint(\"They are not so strange that your head will explode\")\nprint(\"La la dim du da da di\")\nprint(\"Skubi dubi dumdi di\")\nprint(\"Bing di dubi dum da di\")\n\ndef chorus():\n    line1 = \"La la dim du da da di\"\n    line2 = \"Skubi dubi dumdi di\"\n    line3 = \"Bing di dubi dum da di\"\n    return line1 + '\\n' + line2 + '\\n' + line3\n\nprint(\"Functions are super, Functions are cool\")\nprint(\"When writing a program they are a great tool\")\nprint( chorus() )\n\nprint(\"Functions are useful to wrap up some code\")\nprint(\"They are not so strange that your head will explode\")\nprint( chorus() )\n\n\nWe define a function with the def keyword (which is short for “define” in case you wonder).\nAfter def we write the name of the function. We call the function chorus. We could name it something else, but like good variable names, good function names can help you remember what your code does.\nAfter the name you put two parentheses, ().\nThen a colon, :.\nThe statements that are part of the function are nested under the def statement and are indented with four spaces exactly like we do under if-statements.\nThe return-statement ends the function. The expression after the return keyword reduces to a value that the function then returns.\n\n\n\n\nWhen a function is called, each statement in the definition is executed one after the other. If you look at the function definition, you can see that our chorus function has four statements.\nThe first statement assigns a string value to the variable line1.\nThe second statement assigns a string value to the variable line2.\nThe third statement assigns a string value to the variable line3.\nThe fourth statement is a return-statement. The expression after the return keyword in the final statement reduces to a value and this value is what the function call is substituted for. In this case, that value is the following string:\n\n\"La la dim du da da di\\nSkubi dubi dumdi di\\nBing di dubi dum da di\"\n\n\nA function names a piece of code (some statements) just like variables name values like strings and numbers.\nWe call a function by writing the function name followed by parentheses: chorus(). Just writing the function name will not call the function.\nWhen a function is called it is substituted by the value that the function returns – exactly like a variable in an expression is substituted by its value. It is absolutely crucial that you remember this.\n\n\nExercise\nNow that we have a chorus function, that part is out of the way and we can concentrate on our song without having to worry about remembering how many “la la”s it has and so on. Try to change the “lyrics” in the chorus a little bit. Notice how you only need to make the change in one place to change all the choruses in the song – cool right? Without the function, you would have to rely on correctly changing the code in many different places.\n\n\nExercise\nTry to delete the return-statement in the chorus function (the last line in the function) and run the code again. You should see something like this:\nFunctions are super, Functions are cool\nWhen writing a program they are a great tool\nNone\nFunctions are used to wrap up some code\nThey are not so strange that your head will explode\nNone\nIt seems that the function call (chorus()) is now substituted with None. How can that be when we did not return anything? The reason is that when you do not specify a return statement the function returns None by default. This is to honour the rule that variables and a function calls are substituted by a value, and None is simply the value that Python uses to represent “nothing”. None is basically a value denoting the lack of value. As you just saw it is used to represent that no value is returned from a function. It can also be assigned to a variable as a placeholder value until another value is assigned:\nx = None\nx = 4\nAlso, None is considered false in a logical context:\nprint(not None)\n\n\nExercise\nTry this variant to the chorus function. Go through the code slowly and repeat all the steps in the breakdown of what happens when a function is called. Remember to also do each substitution and reduction carefully.\ndef chorus():\n    line1 = 'La la'\n    line2 = 'Du bi du'\n    return line1 + '\\n' + line2\nDo the same for this variant:\ndef chorus():\n    line1 = 'La la'\n    line2 = 'Du bi du'\n    chrous_text = line1 + '\\n' + line2\n    return chrorus_text\nand for this variant:\ndef chorus():\n    return \"La la\\nDu bi du\"\n\n\nExercise\nWhat do you think happens if you move the definition of chorus to the bottom of your file? Decide what you think will happen and why (maybe you remember what happens when you try to use a variable in an expression before you have defined it?). Then try it out.\nprint(\"Functions are super, Functions are cool\")\nprint(\"When writing a program they are a great tool\")\nprint( chorus() )\n\nprint(\"Functions are useful to wrap up some code\")\nprint(\"They are not so strange that your head will explode\")\nprint( chorus() )\n\ndef chorus():\n    line1 = \"La la dim du da da di\"\n    line2 = \"Skubi dubi dumdi di\"\n    line3 = \"Bing di dubi dum da di\"\n    return line1 + '\\n' + line2 + '\\n' + line3\nMake sure you understand how the error you get relates to the way Python runs your script (remember oath two?). If you still do not understand, do the next exercise and then return to this one.\n\n\nExercise\nWhich error do you get here and why? How is that similar to the the error in the previous exericse?\nprint(x)\nx = 7\n\n\nExercise\nConsider the code below. Do all the substitution and reduction steps in your head. Remember that each function call is substituted by the value that the function returns. Then run it.\ndef lucky_number():\n    return 7\n\nx = lucky_number()\ny = lucky_number()\ntwice_as_lucky = x + y\nprint(twice_as_lucky)\nNow change the code to that below. The code makes the same computation but in fewer steps. Do all the substitution and reduction steps again.\ndef lucky_number():\n    return 7\n\ntwice_as_lucky = lucky_number() + lucky_number()\nprint(twice_as_lucky)\nNow change the code to that below. The code makes the same computation but in fewer steps. Do all the substitution and reduction steps again.\ndef lucky_number():\n    return 7\n\nprint(lucky_number() + lucky_number())",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Organising your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/organizing_your_code.html#functions-can-take-arguments",
    "href": "lecture_notes/chapters/python/organizing_your_code.html#functions-can-take-arguments",
    "title": "Organising your code",
    "section": "Functions can take arguments",
    "text": "Functions can take arguments\nThe functions we have written so far are not very flexible because they return the same thing every time they are called. Now write and run this beauty:\ndef square(number):\n    squared_number = number**2\n    return squared_number \n\nresult = square(3)\nprint(result)\nNotice how we put a variable (number) between parentheses in the function definition. This variable is assigned the value that we put between the parentheses (3) when we call the function. So when we call the function like this: square(3) – then this implicitly happens inside the function: number = 3.\nHere is another example:\ndef divide(numerator, denominator):\n    result = numerator / denominator \n    return result\n\ndivision_result = divide(44, 77)\nprint(division_result)\nWhen the function call divide(44, 77), these two things implicitly happen: numerator = 44 and denominator = 77.\nTake note of the following three important points: 1. The values that we pass to the function in the function call (like 3, 44 and 77) are called arguments. It is crucial to remember that it is values and not variables that are passed to functions. 2. The variables in the definition line of a function, like number, numerator and denominator, are called parameters. They hold the values passed to the function when it is called (the arguments). 3. You can define functions with any number of parameters as long as you use the same number of arguments when you call the function.\n\nExercise\nTry to call your divide function like this divide(77, 44). What does it return and what do you learn from that? Does the order of arguments and parameters correspond?\n\n\nExercise\nTry to call your divide function like this divide(44). Do you get an error, and what do you learn from that?\n\n\nExercise\nTry to call your divide function like this divide(44, 77, 33). Do you get a different error message, and what do you learn from that?\n\n\nExercise\nRead this code and do all substitution and reduction steps from beginning to end.\ndef square(x):\n    return x ** 2\n\nresult = square(9) + square(5)\nprint(\"The result is:\", result)\nNow replace the line return x ** 2 with print(x ** 2). What is printed now? and why?\n\n\nExercise\nAs described above, a return statement ends the function by producing the value that replaces the function call. If a function has more than one return statement, then the function ends when the first one is executed.\ndef assess_number(x):\n    if x &lt; 3:\n        return 'quite a few'\n    if x &lt; 100:\n        return 'a lot'\n    return 'a whole lot'\n\nnr_apples = 2\nprint(nr_apples, \"apples is\", assess_number(nr_apples))\nWhat happens when x is 2, 3, 50, 200? Think about it first.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Organising your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/organizing_your_code.html#functions-and-variables",
    "href": "lecture_notes/chapters/python/organizing_your_code.html#functions-and-variables",
    "title": "Organising your code",
    "section": "Functions and variables",
    "text": "Functions and variables\nA function call is temporary little world only exists from the function is called and until it returns its value. It did not exist before the function was called and it does not exist after the function returns its value. By necessity, the variables defined in your function are also temporary.\nThis means that variables defined inside a function are private to each function call. It also means that variables defined inside functions are not available to code outside the function. Running the following example in should help you understand this:\ndef make_greeting():\n    greeting = 'Guten tag'\n    name = 'Heinz' \n    message = greeting + \" \" + name\n    return message\n\ngreeting = 'Buongiorno'\nname = 'Giovanni'\nprint( make_greeting() )\nprint(greeting + \" \" + name)\nNotice how Heinz and Giovanni are greated in their native languages. This means that the variable definitions inside the function does not overwrite the Italian versions already defined outside the function. This is because the variables defined in the function are temporary and private to the function, even if they have the same names as variables outside the function. This is why the function call make_greeting() in the print statement does not change the values of the variables that are printed in the last line.\nNow try to “comment out” the line greeting = 'Guten tag' and run the example again. All of a sudden Heinz is greeted in Italian! The reason is that now Python cannot find a definition of greeting inside the function. It then looks outside the function for a definition and finds the Italian version.\nNow try to “comment out” the line greeting = 'Buongiorno' and run the example again. You get an error, but which one? Python complains that it cannot find a definition of greeting. The reason is that once the last print statement is executed the small world of the function call in the previous line no longer exists.\nYou should learn two rules from the above example:\n\nAll variables that you define inside a function are private to the function. If a variable in a function has the same name as a variable in the main script (like greeting above) then these are two separate variables that just happen to have the same name.\nWhen you use a variable like greeting in the function (E.g. message = greeting + \" \" + name), then Python checks if the variables have been defined in the function. If that is not the case, then it will look for it outside the function. In the above example, it finds name in the function and greeting outside the function. It is good practice to make your functions “self-contained”, in the sense that Python should not have to look outside the function for variables.\n\n\nExercise\nTry this version of the example above. Now name is defined as a function parameter, but is it still a function variable just like greeting.\ndef make_greeting(name):\n    greeting = \"Guten tag\"\n    message = greeting + \" \" + name\n    return message\n\ngreeting = 'Buongiorno'\nname = 'Giovanni'\nprint( make_greeting(\"Heinz\") )\nprint(greeting + \" \" + name)\n\n\nExercise\nConsider the following example:\ndef double(z):\n    return z * 2\n   \nx = 7\nresult = double(x)\nprint(result)\nWhen the function is called (double(x)) the x is substituted by its value 7. That value is passed as the argument and assigned to the function parameter z (z = 7). z is a private function variable and does not exist before or after the function call. Does this change in any way if we use the variable name x instead of z like below?\ndef double(x):\n    return x * 2\n   \nx = 7\nresult = double(x)\nprint(result)\nDo all substations and reductions for each line of code from top to bottom. Keep the sequence of events in mind and remember that a function definition is merely a template describing a mini-world that is created anew everytime the function is called.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Organising your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/organizing_your_code.html#builtin-functions",
    "href": "lecture_notes/chapters/python/organizing_your_code.html#builtin-functions",
    "title": "Organising your code",
    "section": "Builtin functions",
    "text": "Builtin functions\nSo far we have only talked about functions you write yourself, but Python also has built-in functions that are already available to you. They work just like a function you would write yourself. You already know the print function quite well, and that is an example of a function that prints something but returns None. There are many other useful builtin function, but for now, I will just tell you about another two: Those are len and type.\n\nExercise\nTry these examples:\nx = 'Banana'\nprint(\"The value of variable x is of type\", type(x))\nprint(\"The value of variable x has length\", len(x))\nAs you can see, type returns the type of the value passed as the argument, and len returns the length of the value passed as the argument. The type function is handy in case you wonder what type a value has, but it is not a function we will use in this course. The len function, however, is your new best friend. You will see why soon enough.\n\n\nExercise\nTry to change the value of the x in @sec:type_and_len to an integer or a float and see what happens when you run it. Do you get an error? Does it make sense that not all types of values can meaningfully be said to have a length?\n\n\nExercise\nWhat happens if you pass an empty string (\"\") as the argument to the len function?\n\n\nExercise\nWhat is printed here? Think about it first and then try it out. Remember to do the substitution and reduction steps.\nreturn_value = print(\"Hello world\")\nprint(return_value)\n\n\nExercise\nWhat is printed here? Think about it first and then try it out. Remember to do the substitution and reduction steps.\nprint(print(\"Hello world\"))",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Organising your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/organizing_your_code.html#general-exercises",
    "href": "lecture_notes/chapters/python/organizing_your_code.html#general-exercises",
    "title": "Organising your code",
    "section": "General exercises",
    "text": "General exercises\nThe following exercises treat the areas we have worked on in this and previous chapters. They are meant to train your familiarity with if-statements and functions. Remember that the purpose of the exercises is not to answer the questions but to train the chain of thought that allows you to answer them. Play around with the code for each example and see what happens if you change it a bit.\n\nExercise\nConsider this function definition that takes a single number as the argument:\ndef square(n):\n    return n**2\nWhat does it do? What does it return? What number does square(2) then represent?\nBelow I have used it in some expressions that are printed. Make sure you understand what each expression evaluates to. Do the explicit substitutions and reductions on paper before you run it. Remember that we substitute a function call (like square(2)) for the value it returns, just like we substitute a variable x for the value it points to.\nprint(square(3))\nprint(square(2 + 1))\nprint(square(2) * 2 + square(3))\nprint(square(square(2)))\nprint(square(2 * square(1) + 2))\n\n\nExercise\nWhat does this function do? How many parameters does it have? How many statements does the function have? What does the function print? Which value does it return?\ndef power(a, b):\n    print(\"This function computes {}**{}\".format(a, b))\n    return a**b\n\nprint(power(4, 2))\nTry (possibly strange) variations of the code like the ones below to better understand the contribution of each line of code. What is the difference between return and print? What happens when the Python gets to a return statement in a function? What happens when the function does not have a return statement?\nVariation 1:\ndef power(a, b):\n    print(\"This computes\", a, \"to the power of\", b)\n    print(a**b)\n\nresult = power(4, 2)\nprint(result)\nVariation 2:\ndef power(a, b):\n    print(\"This computes\", a, \"to the power of\", b)\n    return a**b\n\nresult = power(4, 2)\nprint(result)\nVariation 3:\ndef power(a, b):\n    print(\"This computes\", a, \"to the power of\", b)\n    a**b\n\nprint(power(4, 2))\nVariation 4:\ndef power(a, b):\n    return a**b\n    print(\"This computes\", a, \"to the power of\", b)\n\nprint(power(4, 2))\n\n\nExercise\nDefine a function called diff, with two parameters, x and y. The function must return the difference between the values of x and y.\nExample:\ndef diff(x, y):\n    ...\n\ndiff(8, 2) # should return 6\ndiff(-1, 2) # should return -3\nSave the value returned from the function in a variable. Then test if the function works correctly by comparing the result to what you know is the true difference (using ==).\n\n\nExercise\nDefine a function called all_equal that takes five arguments and returns True if all five arguments have the same value and False otherwise. The function should work with any input, for example:\nall_equal(\"Can\", \"Can\", \"Can\", \"Can\", \"Can\")\nall_equal(0, 0, 0, 0, 0)\nall_equal(0.5, 0.5, 0.5, 0.5, 0.5)\nall_equal(True, True, True, True, True)\nHint: You test equality with a == b. Now think back to what you learned about logic. Which operator can you use to test if a == b and b == c?\n\n\nExercise\nDefine a function called is_even which takes one argument and returns True if (and only if) this is an even number and False otherwise (remember the modulo operator?).\nis_even(8) # should return True\nis_even(3) # should return False\n\n\nExercise\nDefine a function called is_odd which takes one argument and returns True if (and only if) the argument is an odd number and False otherwise.\nis_odd(8) # should return False\nis_odd(3) # should return True\nCan you use the is_even you defined in @sec:is_even to complete this exercise? How? Why is that a good idea?\n\n\nExercise\nHere is a function that should return True if given an uppercase (English) vowel, and False otherwise:\ndef is_uppercase_vowel(c):\n    c == 'A' or c == 'E' or c == I or c == 'O' or c == 'U'\n    \nchar = 'A' \nif is_uppercase_vowel(char):\n    print(char, \"is an uppercase vowel\")\nelse:\n    print(char, \"is NOT an uppercase vowel\")\nNow type the code exactly as shown and run it. Do you get what you expect? Does the code work? If not, try to figure out why. Try print the value that the function returns. Does that give you any hints about the cause of the problem?\n\n\nExercise\nDefine a function called is_nucleotide_symbol which takes one argument and returns True if this is either A, C, G, T, a, c, g or t, and False in any other case.\nName your parameter something sensible like symbol.\nis_nucleotide_symbol(\"A\") # should return True\nis_nucleotide_symbol(\"B\") # should return False\nis_nucleotide_symbol(\"Mogens\") # should return False\nis_nucleotide_symbol(\"\") # should return False\n\n\nExercise\nDefine a function called is_base_pair which takes two parameters, base1, base2, and returns True if base2 is the complementary of base1, and False otherwise.\nis_base_pair(\"A\", \"G\") # should return False\nis_base_pair(\"A\", \"T\") # should return True\nis_base_pair(\"T\", \"A\") # should return True\nis_base_pair(\"Preben\", \"A\") # should return False\n\n\nExercise\nDid you find the bug in @sec:none_eval_false? You were supposed to find that the function did not have a return value. This makes the function return None by default. Do you think the None value is considered true or false in an if-statement?\n\n\nExercise\nDefine a function called celcius2fahrenheit that converts from celsius to Fahrenheit. You can do this because you know the linear relationship between the two. On @fig:figureX you can see that the slope is 9 / 5 and the intercept is 32. The function should have one parameter celsius. Inside the function, you should define the variables slope and intercept and give them the appropriate values. Then you can calculate the conversion to Celcius using these variables and return the result.\n\n\n\nTemperature conversion\n\n\n\n\nExercise\nTry to change your conversion function so it takes three arguments, corresponding to celsius, slope and intercept so you can call it like this to convert 27 degrees celsius: conversion(37, 9 / 5, 32). Now you have a function that can do any linear conversion that you can put inside another function like this:\ndef celcius2fahrenheit(celsius):\n    return conversion(celsius, 9 / 5, 32)\n\n\nExercise\nNow try to extend this to a different problem: It has been found that the height and weight of a person are related by a linear equation with slope = 0.55 and intercept = -25. Define a function called predict_weight which takes just one argument, the height of a person, and returns the estimated weight of the person.\n\n\nExercise\nBy now you know that some of the words in your code have specific purposes. def defines functions, return returns value from a function, and is a logical operator etc. Here is a list of the ones you will see in this course: and, assert, break, continue def, del, elif, else, False, for, from, if, import, in, is, not, or, pass, return, while, True, None (you can see a full list here)\nThese words are reserved for their special purposes in Python and you will not be allowed to assign values to them. Try this to see for yourself:\nNone = 4\nor this:\nand = 2\n\n\nFAQ - Frequently Asked Questions\nQ: Can function names be anything?\nA: Just about. The rules that apply to variable names also apply to function names. Good function names are lower case with underscores (_) to separate words, like in the examples above.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Organising your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/python_values_are_objects.html",
    "href": "lecture_notes/chapters/python/python_values_are_objects.html",
    "title": "Python values are objects",
    "section": "",
    "text": "Methods\nIn Python, a value like an integer or string, not only holds data. It is also packaged with a lot of useful functionality relevant to the particular type of value. When a value is packaged with such relevant functionality and meta information, programmers call it an object - and in Python all values are objects.\nThe associated functionality comes in the form of methods. You can think of methods as functions that are packaged together with the value. For example, string values have a method called capitalize. Try it out:\nTo call the method on the string value, you connect the string value and the method call with a dot. So to call a method on a value you do the following:\nYou can see that the method call looks just like a function call and in many ways calling a method works much like calling a function. The difference is that when we call a function we say: “Hey function, capitalize this string!”. When we call a method we say: “Hey string, capitalize yourself!”\nSo why do we need methods? Why do we need them when we have functions? It turns out that it is very handy to have some relevant and ready-to-use functionality packaged together with the data it works on. You will start to appreciate that sooner than you think.\nMethods are almost always used with variables. So remember to do any substitutions and reductions requried. When we put a method call after a variable like below, the variable is first substituted for its value and then the method is called on the value. Consider the second line of this example:\nHere x is first substituted by \"banana\" and then the method is called on that value, like this: \"banana\".capitalize().\nNow write and run these examples:\nYou can see what these methods do. For example: upper returns an uppercased copy of the string.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python values are objects</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/python_values_are_objects.html#methods",
    "href": "lecture_notes/chapters/python/python_values_are_objects.html#methods",
    "title": "Python values are objects",
    "section": "",
    "text": "x = \"banana\".capitalize()\nprint(x)\n\n\nWrite the value (or a variable name that substitutes for a value).\nThen write a ..\nThen write the name of the method (like capitalize).\nThen write two parentheses to call the method. If the method takes any arguments other than the value it belongs to, then you write those additional values between the parentheses with commas in between, just as when you call a function.\n\n\n\n\nx = \"banana\"\nprint(x.capitalize())\n\n\nmessage = \"Methods Are Cool\"\nprint(message)\n\nshout = message.upper()\nprint(shout)\n\nwhisper = message.lower()\nprint(whisper)\n\nnew_message = message.replace(\"Cool\", \"Fantastic\")\nprint(new_message)\n\n\nExercise\nWrite and run the following code. What do you think it does?\nline = '\\n\\tSome text\\n'\nprint(\"&gt;{}&lt;\".format(line))\n\nline = line.strip()\nprint(\"&gt;{}&lt;\".format(line))\nMake sure you do the substitution and reduction steps in your head. Be especially careful about the third line of code. Also, what do you think the special \\t character is?\n\n\nExercise\nThe string methods you have tried so far have all returned a new string. Try this example:\n'ATGACGCGGA'.startswith('ATG')\nand this\n'ATGACGCGGA'.endswith('ATG')\nWhat do the methods do and what do they return?",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python values are objects</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/python_values_are_objects.html#using-the-python-documentation",
    "href": "lecture_notes/chapters/python/python_values_are_objects.html#using-the-python-documentation",
    "title": "Python values are objects",
    "section": "Using the Python documentation",
    "text": "Using the Python documentation\nNow that you are well underway to becoming a programmer, you should know your way around the Python documentation. Especially the part called the Python standard library. There is a lot of details in there that we do not cover in this course. These are mainly are tools and techniques that for writing more efficient, extensible, robust and flexible code. The parts we cover in this course are is the minimal set that will allow you to write a program that can do anything.\n\nExercise\nThere is a string method that returns a secret agent:\nprint('7'.zfill(3))\nYou can look it up in the Python documentation.\n\n\nExercise\nBrowse through all the string methods to get am impression of all the functionality that is packaged with string objects.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python values are objects</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/python_values_are_objects.html#string-formatting",
    "href": "lecture_notes/chapters/python/python_values_are_objects.html#string-formatting",
    "title": "Python values are objects",
    "section": "String formatting",
    "text": "String formatting\nYou have already tried string formatting in @sec:first_format_exe. String formatting is a simple but powerful technique that lets you generate pretty strings from pre-computed values. You may have noticed that every time we print a floating-point number, a lot of decimals are shown. Not very pretty if you are only interested in two decimals anyway. To format a string, you use the format method (surprise). In its simplest use, format replaces occurrences of {} with the arguments that is passed to it - like this:\ntaxon = \"genus:{}, species:{}\".format('Homo', 'sapiens')\n\nExercise\nWhat happens if you try this?\nquestion = \"Was {} {} Swedish?\".format('Carl', 'Linneaus')\nand this?\nquestion = \"Was {} Swedish?\".format('Carl', 'Linneaus')\nand this?\nquestion = \"Was {} {} Swedish?\".format('Carl Linneaus')\nIn the two last examples the number of {} did not match the number of arguments to format. What happens when there are too few and what happens when there are too many?\n\n\nExercise\nConsider this code:\ns = \"{} is larger than {}\".format(4, 3)\nprint(s)\nWhat will happen if you run this code? Write the code and see for yourself once you think you know. If you were wrong, make sure you understand why.\n\n\nExercise\nConsider this code:\nlanguage = 'Python'\ninvention = 'sliced bread'\ns = '{} is the best thing since {}'.format(language, invention)\nprint(s)\nWhat will happen if you run this code? Write the code and see for yourself once you think you know. If you were wrong, make sure you understand why.\n\n\nExercise\nConsider this code:\nmy_template = '{} is the best thing since {}'\nlanguage = 'Python'\nprint(my_template.format(language, 'sliced bread'))\nprint(my_template.format(language, 1900 + 89))\nWhat will happen if you run this code? Do the substitution and reduction steps in your head.\n\n\nExercise\nThink back to @sec:chocolatebars where you calculated how many cookies you could buy for 30 kr. The bars are 7 kr. So your program looked something like this:\nnr_bars = 30 / 7\nprint('I can buy', nr_bars, 'chocolate bars!')\nand it ran like this: python chocolate.py\nI can buy 4.285714285714286 chocolate bars!\nString formatting lets you rewrite the program like this:\nnr_bars = 30 / 7\nmessage = \"I can buy {} chocolate bars!\".format(nr_bars)\nprint(message)\nTry to replace {} with {:.2f}. format reads the stuff after the colon in each set of curly brackets and uses it as directions for how to format the value it inserts. Try it out and see what happens if you change the number 2 to 3, 4, 5 or 10.\n\n\nExercise\nSee if you can find the documentation for the format function in the Python documentation. It can do wondrous things, for this course we will only try to control the number of digits and padding with spaces. Look at the examples below. Maybe you can figure out how it works\npi = 3.14159265359\nprint(\"*{}*\".format(pi))\nprint(\"*{:.3f}*\".format(pi))\nprint(\"*{:.6f}*\".format(pi))\nprint(\"*{:&gt;5.3f}*\".format(pi))\nprint(\"*{:&gt;10.3f}*\".format(pi))\n\n\nExercise\nThis is bonus info, rather than an actual exericse. How do you think python can figure out that adding strings with is supposed to work differently than adding numbers? Remember that '1' + '2' is '12' not 3. The answer is that all values you can add with the + operator has a secret method called __add__ that defines how adding works for that type of value:\ns1 = \"11\"\ns2 = \"22\"\nn1 = 11\nn2 = 22\nprint(s1 + s2)\nprint(s1.__add__(s2))\nprint(n1 + n2)\nprint(n1.__add__(n2))\nThis is one of many examples of how objects allow Python to implement functionality that fits each particular type of value. This was just to show how Python does this. Just like yellow and black stripes in nature means “don’t touch me!” – double underscores (__) is Python’s way of saying “do not use this!”. You are supposed to use the + operator not the __add__ method.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python values are objects</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/python_values_are_objects.html#indexing-and-slicing-strings",
    "href": "lecture_notes/chapters/python/python_values_are_objects.html#indexing-and-slicing-strings",
    "title": "Python values are objects",
    "section": "Indexing and slicing strings",
    "text": "Indexing and slicing strings\nAnother feature of string objects is that they allow you to extract individual parts of the string.\nEach character in a string is identified by its index in the string. To access a character in a list you write brackets after the string. Between those brackets, you specify the index of the character you want. The first character has index 0, the second has index 1 and so on.\ncodon = 'ATG'\nprint(\"first base is\", codon[0])\nprint(\"second base is\", codon[1])\nprint(\"third base is\", codon[2])\nYou may wonder why the index of the first character is zero and not one. That is simply the convention in programming and is so for good reason. Over time you will begin to find this useful rather than annoying. You should think of the index as the offset from the start of the string.\nThat also means that the index is not the length of the string, but the length minus one:\namino_acids = 'ARNDCQEGHILKMFPSTWYV'\nlast_index = len(amino_acids)-1\nprint(\"Last amino acid is\", amino_acids[last_index])\nIf you want a sub-string from a larger string (we call that a slice), you specify a start index and an end index separated by a colon:\nprint(amino_acids[1:4])\nWhen you run that you can see that amino_acids[1:4] is substituted for 'RND', so the slicing operation produces a sub-string of amino_acids. You may wonder why the value at index 4 is not in the resulting sub-string. That is another programming convention: intervals are ends exclusive. So when you specify an interval with a start index of 1 and an end index of 4 it represents all the characters starting from 1 and up to, but not including, 4. So the slice 1:4 corresponds to the characters at indexes 1, 2 and 3. The reason programmers handle intervals in this way is that it makes it easier to write clear and simple code as you will see in the exercises.\n\nExercise\nWhat do this expression reduces to?\n\"Futterwacken\"[7]\n\n\nExercise\nWhat is printed here? Do all the substitution and reduction steps and compare to the exercise above.\ns = \"Futterwacken\"\nprint(s[7])\n\n\nExercise\nWhat is printed here? Do all the substitution and reduction steps – and do it twice. Next week you will be happy you did.\ndna = 'TGAC'\ni = 0\nprint(dna[i])\ni = 1\nprint(dna[i])\ni = 2\nprint(dna[i])\n\n\nExercise\nWhat do you think happens here? Make up your mind and try out the code below:\ns = \"Futterwacken\"\ns[6] = 'W'\nDid you see that coming? Strings are immutable, which means that you cannot change them once you have made them. If you want \"FutterWacken\" you need to produce a new string with that value. Try to figure out how to do that with the replace method of strings.\n\n\nExercise\nWhen you do not specify the start and/or the end of a slice, Python will assume sensible defaults for the start and end indexes. What do you think they are? Make up your mind and try out the code below:\ns = 'abcdefghijklmnopqrstuvxyz'\nprint(s[:11])\nprint(s[11:])\nprint(s[:])\n\n\nExercise\nFind the documentation for how slicing of strings work.\n\n\nExercise\nWhat do you think happens when you specify an index that does not correspond to a value in the list:\nalphabet = 'abcdefghijklmnopqrstuvxyz'\nprint(alphabet[99])\nRead and makek sure you understand the error message. You can try to Google the error message.\n\n\nExercise\nDo you think you also get an error when you specify a slice where the end is too high? Try it out:\nalphabet = 'abcdefghijklmnopqrstuvxyz'\nprint(alphabet[13:99])\nand this:\nalphabet = 'abcdefghijklmnopqrstuvxyz'\nprint(alphabet[10000:10007])\nI guess that is worth remembering, right?\n\n\nExercise\nWhich character in a string named alphabet does this expression reduce to?\nalphabet[len(alphabet)-1]\n\n\nExercise\nBecause intervals are “ends exclusive” we can compute the length of a slice as end - start:\ndna = \"ATGAGGTCAAG\"\nstart = 1\nend = 4\nprint(\"{} has length {}\".format(dna[start:end], end-start))\nFigure out what this code would look like if ends were included in intervals.\n\n\nExercise\nAnother advantage of “ends exclusive” intervals is that you only need one index to split a string in two:\ns = 'Banana'\nidx = 3\nbeginning = s[:idx]\nend = s[idx:]\nprint(beginning + end)\nFigure out what indexes you would need to use to split a sequence in two if ends were included in intervals.\n\n\nExercise\nDid you look up the details of how slicing works in @sec:slicing_docs? Then you should be able to explain what happens here:\ns = 'zyxvutsrqponmlkjihgfedcba'\nprint(s[::-1])",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python values are objects</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/python_values_are_objects.html#general-exercises",
    "href": "lecture_notes/chapters/python/python_values_are_objects.html#general-exercises",
    "title": "Python values are objects",
    "section": "General exercises",
    "text": "General exercises\n\nExercise\nWill this print Bananas rule!? Do all the substitutions and reductions.\nif 'na' * 2 == \"Banana\"[2:]:\n    print(\"Bananas rule!\")\n\n\nExercise\nWill this print Bananas rule!? Do all the substitutions and reductions.\nif \"{}s\".format('Banana'[1:].capitalize()) == 'Ananas':\n    print(\"Bananas rule!\")\n\n\nExercise\nWrite a function called even_string that takes a string argument and returns True if the length of the string is an even number and False otherwise. E.g. even_string('Pear') should return True and even_string('Apple') should return False (remember the modulo operator?).\n\n\nExercise\nLook at the code below and decide what is printed at the end. Then write the code and test your prediction. If you are wrong, make sure you figure out why ny revisiting the chapter about functions.\ndef enigma(x):\n    if x == 4:\n        return x\n\nresult = enigma(5)\nprint(result)\n\n\nExercise\nInspect the code below and figure out why it does not print that you are a super star. Test the function using various input and figure out the mistake.\ndef even_number(x):\n    if x % 2:\n        return False\n\nif even_number(4):\n    print('You are a super star!')",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Python values are objects</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/lists.html",
    "href": "lecture_notes/chapters/python/lists.html",
    "title": "Lists of things",
    "section": "",
    "text": "Lists\nFor many kinds of data, the order of things is important. Just like the order of characters is important for the meaning of text in a string, we sometimes we want to specify the order of other things because the relative order of items in the list has some meaning. It could be a grocery list where you have listed the things to buy in the order you get to them in the supermarket. This is where Python lists are useful. When you print a list it nicely shows all the values it contains.\nUnlike strings that can only store the order of characters, lists can contain any kind of values and you can mix different types of values any way you like. Here is a list that contains an integer, a boolean, a string and a list:\nBy now you have probably guessed that you make a list with two square brackets. Between them you can put values with commas in-between. A list is a container of other values and the value of the list itself does not depend on the values it contains. This makes sense. Otherwise, an empty list would not have a value:\nYou can add single values to the end of a list using the append method of lists. Try it out:\nIf you have a list you want to add to the end of another list you use the extend method:\nNotice how append and extend modifies the existing list instead of producing a new list with the added element.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lists of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/lists.html#lists",
    "href": "lecture_notes/chapters/python/lists.html#lists",
    "title": "Lists of things",
    "section": "",
    "text": "grocery_list = [\"salad\", \"canned beans\", \"milk\", 'beer', 'candy']\nprint(grocery_list)\n\nmixed_list = [42, True, 'programming', [1, 2, 3] ]\n\nmy_list = []\n\ndesserts = []\nprint(desserts)\ndesserts.append('Crepe suzette')\nprint(desserts)\ndesserts.append('Tiramisu')\nprint(desserts)\ndesserts.append('Creme brulee')\nprint(desserts)\n\ncheeses = ['Gorgonzola', 'Emmentaler', 'Camembert']\ndesserts.extend(cheeses)\nprint(desserts)\n\n\nExercise\nDo you think this will work?\ncheeses = ['Gorgonzola', \n           'Emmentaler', \n           'Camembert']\nprint(cheeses)\nSurprised? Code inside parentheses, brackets and braces can span several lines, which can sometimes make your code easier to read.\n\n\nExercise\nIf you want to test if a value is in a list you use the in operator. Try this:\nprint('Tiramisu' in desserts)\nprint('Meatloaf' in desserts)\n\n\nExercise\nYou can concatenate two lists to produce a new joined list. Make sure you figure out how this works before you try it out. Then experiment with changing the lists. Can you concatenate two empty lists?\nsome_list = [1, 2, 3]\nanother_list = [7, 8, 9]\nmerged_list = some_list + another_list\nprint(merged_list)\nThis is yet another example of how the functionality of Python objects lets them “know” how to behave under different circumstances, such as when adding two objects (see @sec:add_method).\n\n\nExercise\nWhat do you think is printed here? Make sure you figure out how you think this works before you try it out. What does the append method return?\nmy_list = []\nx = my_list.append(7)\nprint(x)\nprint(my_list)",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lists of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/lists.html#indexing-and-slicing-lists",
    "href": "lecture_notes/chapters/python/lists.html#indexing-and-slicing-lists",
    "title": "Lists of things",
    "section": "Indexing and slicing lists",
    "text": "Indexing and slicing lists\nNow you know how to make lists, but to work with the values in lists you must also know how to access the individual values that a list contains. Fortunately, indexing lists works just like indexing strings: Each value in a list is identified by an index exactly like each character in a string:\nnumbers = [7, 4, 6, 2, 8, 1]\nprint(\"first value is\", numbers[0])\nprint(\"second value is\", numbers[1])\nprint(\"third value is\", numbers[2])\nNotice that the function len can also compute the length of a list. So you also get the last value in list like this:\nnumbers = [7, 4, 6, 2, 8, 1]\nlast_index = len(numbers)-1\nprint(\"Last element is\", numbers[last_index])\nIf you want a sub-list of values from a list (we also call that a slice) you specify a start index and an end index separated by a colon, just like with strings:\nprint(numbers[1:4])\nWhen you run that you can see that numbers[1:4] is substituted for [4, 6, 2], so the slicing operation produces a new list of the specified values.\n\nExercise\nWhat do these two expressions reduce to?\n[11, 12, 13, 14, 15, 16, 17][2]\n\n\nExercise\nWhat is printed here? Do all the substitution and reduction steps and compare to the exercise above.\nl = [11, 12, 13, 14, 15, 16, 17] \nprint(l[2])\n\n\nExercise\nWhat is printed here? Do all the substitution and reduction steps – and do it twice. Next week you will be happy you did.\nnumbers = [1,2,3]\ni = 0\nprint(number[i])\ni = 1\nprint(number[i])\ni = 2\nprint(number[i])\n\n\nExercise\nWhat do you think happens here? Make up your mind and try out the code below:\nl = [11, 12, 13, 14, 15, 16, 17] \nl[4] = \"Donald\"\nprint(l)\nWere you surprised what happened? Compare to @sec:immutable_strings. Lists are not immutable like strings and you can replace values by assigning a new value to an index in the list.\n\n\nExercise\nWith your knowledge of slicing, what do you think is printed below:\nl = [11, 12, 13, 14, 15, 16, 17]\nprint(l[:3])\nprint(l[3:])\nprint(l[:])\n\n\nExercise\nWhat do you think happens when you specify an index that does not correspond to a value in the list:\nl = [11, 12, 13, 14, 15, 16, 17] \nprint(l[7])\nRead and understand the error message. Does it ring a bell?\n\n\nExercise\nDo you think you also get an error when you specify a slice where the end is too high? Try it out:\nl = [11, 12, 13, 14, 15, 16, 17]\nprint(l[4:99])\nI guess that is also worth remembering.\n\n\nExercise\nWhich value in a list named l does this expression reduce to?\nl[len(l)-1]\n\n\nExercise\nIf you do not like Emmentaler you can just delete it. What do you think the del keyword does?\ncheeses = ['Gorgonzola', 'Emmentaler', 'Camembert']\nprint(cheeses)\ndel cheeses[1]\nprint(cheeses)\n\n\nExercise\nBecause intervals are “ends exclusive” we can compute the length of a slice as end - start:\nl = [7, 4, 6, 2, 8, 1]\nstart = 1\nend = 4\nprint(\"{} has length {}\".format(l[start:end], end-start))\nThink about what this code would look like if ends were included in intervals.\n\n\nExercise\nAnother advantage of “ends exclusive” intervals is that you only need one index to split a list in two:\nnumbers = [1, 2, 3, 4, 5, 6]\ni = 3\nbeginning = numbers[:i]\nend = numbers[i:]\nprint(beginning + end)\nIf ends were included in intervals this would not be as simple.\n\n\nExercise\nDo all the substitution and reduction steps in your head (or on paper) before you write any of the following code. Think carefully and make up your mind what you think will be printed below. Remember that the value of a list is a container that holds other values in it. Then write the code and see if you were right. If you were not, make sure you figure out what led you to the wrong conclusion.\nx = 'A'\ny = 'B'\nz = 'C'\nlst = [x, y, z]\nprint(lst)\n\nx = 'Preben'\nprint(lst) # what is printed here? \n\nlst[0] = 'Mogens'\nprint(lst) # what is printed here?\n\n\nExercise\nDo you remember this trick from string slicing?\nl = [1, 2, 3, 4, 5]\nprint(l[::-1])\n\n\nExercise\nYou can produce a list by splitting a long string into smaller parts. Think: “Hey string, split yourself on this smaller string”. Try these variations to figure out how it works\n\"Homo sapiens neanderthalensis\".split(\" \")\n\"Homo sapiens neanderthalensis\".split('en')\n'ATGCTCGTAACGACACTGCACTACTACAATAG'.split('')\n\"1, 2, 3, 5, 3, 2, 5, 3\".split(', ')\n\"1,2,3,5,3,2,5,3\".split(',')\n'ATGCTCGTAACGACACTGCACTACTACAATAG'.split()\n\"Homo sapiens neanderthalensis\".split()\nNotice that the method has a default behavior when no argument is passed to it.\n\n\nExercise\nYou can produce a string by joining the elements of a list (if all the elements are strings of course). Think: “Hey string, put yourself in between all the strings in this list”.\n\"-\".join(['Homo', 'sapiens', 'neanderthalensis'])\n\"...\".join(['Homo', 'sapiens', 'neanderthalensis'])\n\"\".join(['A', 'T', 'G'])\nNotice how you can join something on an empty string. This is a very useful technique; for example if you want to turn a list of characters into a string.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lists of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/lists.html#general-exercises",
    "href": "lecture_notes/chapters/python/lists.html#general-exercises",
    "title": "Lists of things",
    "section": "General exercises",
    "text": "General exercises\nWhat does this expression reduce to? 'aaaaa', 'BaBaBa', or 'Banan'. Make up your mind and and then run the expression to check.\n'a'.join('Banana'.split('a')[:3] * 4)[-5:]",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Lists of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dictionaries.html",
    "href": "lecture_notes/chapters/python/dictionaries.html",
    "title": "Pairs of things",
    "section": "",
    "text": "Dictionaries\nLists are useful for storing values when the order of the values is important but lists have one drawback: you can only access a value in a list using the index of the value.\nA dictionary, called dict in Python, is a much more flexible data type. Like a list, a dictionary is a container for other values, but dictionaries do not store values in sequence. They work more like a database that lets you store individual values. When you store a value you assign it to a key that you can then use to access the stored value. Now create your first dictionary:\nThis dictionary has three values ('Actor', 'Robert Redford' and 179) and each value is associated with a key. Here 'height' is the key for the value 179. So when defining a dictionary you should note the following:\nTo access a value in the dictionary you its key in square brackets after the dictionary:\nHere we used strings as keys, but you can also use many types of values as keys (Python will give you an error if you try to use a type that is not allowed):\nA dictionary stores key-value pairs but do not keep track of their order. So when you print a dictionary the order of the key-values pairs is arbitrary.\nIf you have a dictionary you can add key-value pairs in this way:\nNotice that if you assign a value (71) to a key that is already in the dictionary ('age'), then the old value (70) is replaced.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pairs of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dictionaries.html#dictionaries",
    "href": "lecture_notes/chapters/python/dictionaries.html#dictionaries",
    "title": "Pairs of things",
    "section": "",
    "text": "person = {'name': 'Robert Redford', 'height': 179, 'job': 'Actor'}\n\n\nYou make a dictionary using braces.\nBetween you braces you put key-value pairs separated by a colon.\nThe key-value pairs are separated by commas.\nTo make an empty dictionary you just write the braces with nothing between them: {}.\n\n\n\"{} is a {} cm {}\".format(person['name'], person['height'], person['job'])\n\nmisc_dict = {42: \"Meaning of life\", \"pi\": 3.14159, True: 7}\n\n\nperson['job'] = 'Retired'\nperson['hair'] = 'uniquely combed'\nprint(person)\n\n\nExercise\nWhat does this expression evaluate to?\n{'name': 'Robert Redford', 'height': 179, 'job': 'Actor'}['name']\n\n\nExercise\nAssuming the definition of the person dictionary above, what does this expression evaluate to? Compare to the expression in the previous exercise.\nperson['name']\n\n\nExercise\nThe in operator also works with dictionaries. Look at what these expressions reduce to and then try to figure out what in does when applied to a dictionary:\n'name' in person\n'height' in person\n'job' in person\n84 in person\n'Actor' in person\n'Robert Redford' in person\n\n\nExercise\nWrite and run this code with different values of key and read any error messages.\nkey = 3\n# key = 'banana'\n# key = 3.14159\n# key = True\n# key = {}\n# key = []\nd = {}\nd[key] = 7\nAre any of the values not allowed as keys?\n\n\nExercise\nDo you think this will work?\nperson = {'name': 'Robert Redford', \n                'height': 179,\n                'job': 'Actor'}\nprint(person)",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pairs of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/dictionaries.html#general-exercises",
    "href": "lecture_notes/chapters/python/dictionaries.html#general-exercises",
    "title": "Pairs of things",
    "section": "General exercises",
    "text": "General exercises\n\nStart by makeing dictionaries for (some of) the Trump family:\ndonald = {'name': 'Donald Trump', 'age': 70, 'job': 'President' }\nmelania = {'name': 'Melania Trump', 'age': 70, 'job': 'First lady' }\ntiffany = {'name': 'Tiffany Trump', 'age': 23, 'job': 'Internet personality' }\nivanka = {'name': 'Ivanka Trump', 'age': 35, 'job': 'Top aide' }\n\nExercise\nWhat do you think the following code produces? Do all of the substitution and reduction steps in your head, and only then try out the code.\ndonald['child'] = tiffany\nmelania['husband'] = donald\n\nprint(melania)\nprint(melania['husband']['child'])\n\n\nExercise\nA dictionary can contain any kind of Python values, even lists or dictionaries. Consider the code below where we add a list of ex-wives to the Trump persona. Can you see why we need to check if the 'ex-wives' key before we add to the list of ex-wives?\ndonald = {'name': 'Donald Trump', 'age': 70, 'job': 'President' }\n\nif 'ex-wives' not in donald:\n    donald['ex-wives'] = []\ndonald['ex-wives'].append('Marla Maples')\ndonald['ex-wives'].append('Ivana Trump')\n\nprint(donald)\n\n\nExercise\nI case you wonder what the type of value a list is, or a dictionary, try this:\nprint(\"A list has type:\", type([]))\nprint(\"A dictionary has type:\", type({}))\nNow the types list and dict are your friends too.\n\n\nExercise\nLists can also contain any kind of value. Consider this example. What do you think the following code produces? Do all the substitution and reduction steps in your head, and only then try out the code.\ntrump_family = [donald, melania, ivanka, tiffany]\nprint(trump_family)\nprint(trump_family[1]['job'])\n\n\nExercise\nWrite and run this code\namino_acids = {}\namino_acids['ATG'] = 'met'\namino_acids['TCT'] = 'ser'\namino_acids['TAC'] = 'tyr'\n\ncodon = 'TCT'\nprint(\"{} encodes {}\".format(codon, amino_acids[codon]))\n\nYou have probably noticed that, for each type of value, the interpretation of length is different. In a string it is the number of characters, in a list is the number of values in the list and in a dictionary, it is the number of key-value pairs. How do you think Python knows which interpretation of length to use when the len function is called? This is where objects shine. len(x) just returns the value that x.__len__() returns. So the len function is defined roughly like this:\ndef len(x):\n    return x.__len__()\nSimilarly, the in operator call a secret __contains__ method.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Pairs of things</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/gluing_values_in_sequence.html",
    "href": "lecture_notes/chapters/python/gluing_values_in_sequence.html",
    "title": "Gluing values in sequence",
    "section": "",
    "text": "Tuples\nA tuple is a sequence of values just like a list. However, unlike a list, the elements of a tuple can not be changed. You cannot append to a tuple either. Once a tuple is made it is immutable (or unchangeable). To make a tuple you just use round brackets instead of square brackets:\nIt may seem strange that Python has both tuples and lists. One reason is that whereas lists are more flexible, tuples are more efficient. We will not use tuples a lot, but you need to know what they are.\nYou can do most of the operations on a tuple that you can also do on a list. The following exercises should be easy if you remember how to do the same thing on lists:",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Gluing values in sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/gluing_values_in_sequence.html#tuples",
    "href": "lecture_notes/chapters/python/gluing_values_in_sequence.html#tuples",
    "title": "Gluing values in sequence",
    "section": "",
    "text": "fruits = (\"apple\", \"banana\", \"cherry\")\n\n\n\nExercise\nFind the number of elements in the fruits tuple using the len function.\n\n\nExercise\nExtract the second element of the fruits tuple (\"banana\") using indexing.\n\n\nExercise\nTry to change the second element of the fruits tuple to \"apple\" and see what happens. It should be someting like this:\nTraceback (most recent call last):\n  File \"script.py\", line 2, in &lt;module&gt;\n    fruits[3] = \"apple\"\nTypeError: 'tuple' object does not support item assignment\nYou cannot change elements of a tuple because they are immutable (once made, they stay that way).",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Gluing values in sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/gluing_values_in_sequence.html#tuple-assignment",
    "href": "lecture_notes/chapters/python/gluing_values_in_sequence.html#tuple-assignment",
    "title": "Gluing values in sequence",
    "section": "Tuple assignment",
    "text": "Tuple assignment\nPython lets you assign a tuple of values to a tuple of variables like this:\nfather, mother, son = (\"Donald\", \"Ivana\", \"Eric\")\nIt does the same as the following three assignments:\nfather = \"Donald\"\nmother = \"Ivana\"\nson = \"Eric\"\nWhen a tuple is made, the values are “packed” in sequence:\nfamily = (\"Donald\", \"Ivana\", \"Eric\")\nUsing the same analogy, values can be “unpacked” using tuple assignment:\nfather, mother, son = family\nThe only requirement is that the number of variables equals the number of values in the tuple.\nOnce in a while, it is useful to swap the values of two variables. With conventional assignment statements, we have to use a temporary variable. For example, to swap a and b:\ntmp = a\na = b\nb = tmp\n\nExercise\nTry this and read the error message:\nfamily = (\"Donald\", \"Ivana\", \"Eric\")\nfather, mother = family\n\n\nExercise\nTry this and read the err or message:\nfamily = (\"Donald\", \"Ivana\", \"Eric\")\nfather, mother, son, daughter = family\nCompare to the error message in the previous exercise.\n\n\nExercise\nSay want to swap the values of two variable a and b. To do that you would need to keep one of the values in an extra variable like this:\ntemp = a\na = b\nb = temp\nCan you come up with a simple and pretty way of swapping a and b in one statement, using what you have learned in this chapter? Maybe it occurs to you before you realize how it works, so make sure you can connect your solution to the rules of tuples and tuple assignment.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Gluing values in sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/iteration_over_values.html",
    "href": "lecture_notes/chapters/python/iteration_over_values.html",
    "title": "Iteration over values",
    "section": "",
    "text": "The for-loop\nPrograms often need to do repetitive things. Consider this example below where x is assigned a value that is then printed:\nYou can see that we do the same thing four times with the only difference that the variable x takes a new value each time. Now carefully write the alternative version below and compare what is printed to what was printed in the above example.\nIt should be exactly the same. What you just wrote is called a for-loop. It is called a for-loop because it does something for each of many values – in this case for each value in our list.\nThe statements nested under the for-loop are run as many times as there are values in our list, and every time they are run x is assigned a new value. The first time the statements are run, x is assigned the first value in the list. The second time they are run x is assigned the second value in the list. This continues until x has been assigned all the values in the list.\nThe semantics of a for-loop is as follows:\nWhat is an iterable, you may ask? Actually, it is any kind of value that knows how to serve one value at a time until there are none left. Only objects that have an __iter__ method can do this. If you try to iterate over a value that does not have an __iter__ method you will get an error. Try the code below and see how Python complains that “‘int’ object is not iterable”:\nTry these variations of the for-loop above and notice how the rules 1-5 apply in each case:\nIn each case, the expression after in reduces to the value [1, 5, 3, 7], which then serves as the iterable.\nNot only lists are iterable. Strings are too. Their ‘iter’ method of a string tell it that it should serve once character at a time. Try this:\nNeat, right?.\nIn programming, you very often need to iterate over integer values, and sometimes quite a few (like the 250 million bases of the human chromosome one). It would be quite annoying if you had to manually make long lists of integers, so Python provides a builtin function called range that helps you out. It returns a special iterator value that lets you iterate over a specified range of numbers. Try the two examples below and compare what is printed:\nYou can see that using range works just like using a list of numbers, but the cool thing about range is that it does not return a list. It just serves one number at a time until it is done. This is also why you will not see a list if you try to print what range returns:\nThe range function needs three values to know which values to iterate over: “start”, “end” and “step”. If you do not give it all three arguments it will assume sensible defaults. Try this:\nYou can see that the first and the last arguments default to 0 and 1. If you give it two arguments it will assume that they are “start” and “end”. If you only give it one argument it will assume that it is the “end”.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Iteration over values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/iteration_over_values.html#the-for-loop",
    "href": "lecture_notes/chapters/python/iteration_over_values.html#the-for-loop",
    "title": "Iteration over values",
    "section": "",
    "text": "x = 1\nprint(x)\nx = 5\nprint(x)\nx = 3\nprint(x)\nx = 7\nprint(x)\n\nfor x in [1, 5, 3, 7]:\n    print(x)    \n\n\n\n\nFirst, you write for.\nThen you write the name of the variable that will be assigned a new value for each iteration of the loop (x in the above case).\nThen you write in.\nThen you write the name of an iterable or an expression that reduces to one. In the above case, it was the list [1, 5, 3, 7].\nThe statements nested under the for loop are indented with four spaces just like with if-statements. These statements are executed once for every value in the iterable.\n\n\nfor x in 4:\n    print(x)\n\nfor x in [1, 5, 3, 7]:\n    print(x)    \n\nlist_of_numbers = [1, 5, 3, 7]\nfor x in list_of_numbers:\n    print(x)    \n\nfor x in [1, 5] + [3, 7]:\n    print(x)    \n\n\nfor character in 'banana':\n    print(character)\n\n\ntotal = 0\nfor number in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:\n    total += number\nprint(total)\n\ntotal = 0\nfor number in range(10):\n    total += number\nprint(total)\n\nnumber_iterator = range(10)\nprint(number_iterator)\n\nfor i in range(0, 10, 1):\n    print(i)\n\nfor i in range(0, 10):\n    print(i)\n\nfor i in range(10):\n    print(i)\n\n\nExercise\nWhat do you think the third argument to range specifies? Try these variations and see if you can figure it out:\nfor i in range(0, 10, 1):\n    print(i)\n\nfor i in range(0, 10, 2):\n    print(i)\n\nfor i in range(0, 10, 3):\n    print(i)\nCheck the documentation once you have made up your mind.\n\n\nExercise\nWhat will happen here:\nfor x in []:\n    print(x)  \nand here:\nfor x in range(0):\n    print(x)  \nand here:\nfor x in range(10, 10):\n    print(x)  \n\n\nExercise\nThe two examples below print the same. Make sure you understand why. Write and experiment with the code on your own.\nlist_of_words = ['one', 'two', 'three']\n\n# example 1\nfor word in list_of_words:\n    print(word)\n\n# example 2\nlist_length = len(list_of_words)\nfor index in range(list_length):\n    print(list_of_words[index])\n\n\nExercise\nFinish the code below so all the even numbers go into one list and all the odd numbers go into the other (hint: remember the modulo operator?)\nnumbers = [4, 9, 6, 7, 4, 5, 3, 2, 6]\neven = []\nodd = []\nfor n in numbers:\n    # your code here ...\n    \n    \n\n\nExercise\nYou can put any statements under the for-loop. Here it includes an if-statement that lets you generate a list of all the a characters in banana (in case you need that).\nresult = []\nfruit = 'banana'\nfor character in fruit:\n    if character == 'a':\n        result.append(character)\nprint(result)\nNow change the code so you instead get the indexes of the ‘a’ characters: [1, 3, 5]. Here are some hints:\n\nYou need a for-loop over a list of numbers.\nrange(len(fruit)) may be relevant numbers :-).\nfruit[1] substitutes for 'a'.\n\n\n\nExercise\nImagine you want to throw a big party and that you have a rented a place with room for 100 people. Now you want to start inviting people. What kind of error do you get here and why?\nfriends = [\"Mogens\", \"Preben\", \"Berit\"]\ninvited = []\nfor index in range(100):\n    invited.append(friends[index])\n\n\nExercise\nYou can also put a for-loop under another for loop, and the rules for each for loop are still those explained above: The statements nested under the for loop are indented with four spaces just like with if-statements. These statements are executed once for every value in the iterable. Think carefully about what you think is printed in the example below before you try it out.\nfor i in range(3):\n    for j in range(3):\n        print(i, j)\nMake sure you understand i, j pairs are printed in the order they are.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Iteration over values</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/working_with_data_files.html",
    "href": "lecture_notes/chapters/python/working_with_data_files.html",
    "title": "Working with data files",
    "section": "",
    "text": "Writing files\nTo interact with a file on your harddisk you need to know the name of the file and whether you want to write to it or read from it. Then you can use the builtin function open to create a file object that lets you read or write to that file. The open function takes two arguments: The first is a string, which gives the name of the file. The second argument is also a string and should be 'w' for “write” if you want to write to the file or 'r' for “read” if you want to read from the file. To keep things simple we will assume that the file you want to open is always in the same folder (directory) as the Python script that calls the open function.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Working with data files</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/working_with_data_files.html#writing-files",
    "href": "lecture_notes/chapters/python/working_with_data_files.html#writing-files",
    "title": "Working with data files",
    "section": "",
    "text": "Exercise\nTry to write the code below and run it:\nf = open('workfile.txt', 'w')\nf.write(\"First line\\n\")\nf.write(\"Second line\\n\")\nf.close()\nNow open the workfile.txt in VScode and see what is in it now. It should contain:\nFirst line\nSecond line\nLets break down what happened:\n\nYou used the open builtin function to open a file called “workfile.txt” in writing mode using the 'w' as the second argument.\nYou then wrote the string \"First line\\n\" to the file using the write method of the file object.\nYou wrote another string \"Second line\\n\" to the file using the write method of the file object.\nYou closed the file using the close method of the file object.\n\nNote that if you open a file for writing, a file with that name is created. If a file of that name already exist, it is overwritten.\n\n\nExercise\nClose workfile.txt in VScode again and change your program above to this (removing the \\n characters):\nf = open('workfile.txt', 'w')\nf.write(\"First line\")\nf.write(\"Second line\")\nf.close()\nWhat do you think the content of workfile.txt is now? Decide before you open workfile.txt in VScode again and have a look. What do you think the \\n character represents?\n\n\nExercise\nClose workfile.txt in VScode and change your program above to this:\nf = open('workfile.txt', 'w')\nf.write(\"First line\\nSecond line\\n\")\nf.close()\nCan you see how that is equivalent to what you did before? Open workfile.txt in VScode again and have a look.\n\n\nExercise\nYou can also make print write to a file instead of the terminal. That way your output ends up in the file instead of the terminal. To make print write to a file, you need to use the file keyword argument to give print the file object that represents the file you want to write to (file=f below). Try to write the code below and run it:\nf = open('workfile.txt', 'w')\nprint(\"First line\", file=f)\nprint(\"Second line, file=f\")\nf.close()\nCompare the the code to that in @sec:write_to_file. Notice how the strings we print do end with a newline. This is because the default behaviour for print is to add a newline to the end of what it prints - just like when you print to the terminal.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Working with data files</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/working_with_data_files.html#reading-files",
    "href": "lecture_notes/chapters/python/working_with_data_files.html#reading-files",
    "title": "Working with data files",
    "section": "Reading files",
    "text": "Reading files\nWhen you want to read a from an existing file you give the open function the name of that file and specify 'r' for reading as second argument. If the file you name does not exist, Python will tell you that it does not exist (it is nice like that). Before you head into the next rest of this section make sure you redo @sec:write_to_file so the content of workfile.txt is:\nFirst line\nSecond line\n\nExercise\nf = open('workfile.txt', 'r')\nfile_content = f.read()\nprint(file_content)\nf.close()\nLets break down what happened:\n\nYou used the open builtin function to open a file called workfile.txt in reading mode using the 'r' as the second argument.\nYou then read the content of the file using the read method, which return the contents as a string.\nYou printed the string.\nYou closed the file using the close method of the file object.\n\n\n\nExercise\nTry to read from the file after you close it:\nf = open('workfile', 'r')\nf.close()\nfile_content = f.read()\nDo you get an error? Which one? Do you understand why?\n\n\nExercise\nYou can use the readline method to read one line at a time. What do you think happens if you run this code:\nf = open('workfile.txt', 'r')\nline = f.readline()\nprint(line)\nline = f.readline()\nprint(line)\nline = f.readline()\nprint(line)\nOnce you decide, try it out. What is printed in the last print statement? The thing is, the file object keeps track of how much of the file it has read. Once it is at the end you can read as much as you like – there is nothing left. If you want to start reading from the top of the file you can close and open the file again. Try to insert the following two statements at various places in the code above and see what happens?\nf.close()\nf = open('workfile.txt', 'r')\n\n\nExercise\nLook at the code below and figure out for yourself what it does:\ninput_file = open('workfile.txt', 'r')\noutput_file = open('results.txt', 'w')\n\nfor line in input_file:\n    line = line.upper()\n    output_file.write(line)\nThen run it and open results.txt in VScode and see what it produced.\nWere you surprised that the file object can be an iterator in a for-loop? Just like stings can iterate over characters, lists can iterate over values and dictionaries can iterate over keys, file objects can iterate over the lines in the file.\nTry to modify your code to use the print function instead of the write method (see @sec:write_to_file_with_print).",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Working with data files</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/working_with_data_files.html#general-exercises",
    "href": "lecture_notes/chapters/python/working_with_data_files.html#general-exercises",
    "title": "Working with data files",
    "section": "General exercises",
    "text": "General exercises\n\nExercise\nWrite a function read_file that takes the name of a file as argument. The file should read the content of the file and return it. Like:\ncontent_of_file = read_file('some_file.txt')\n\n\nExercise\nWrite a function that takes the name of two files as arguments. The file should read the content of the first file and write it to the second file.\ncopy_file('some_file.txt', 'other_file.txt')",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Working with data files</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/data_structures.html",
    "href": "lecture_notes/chapters/python/data_structures.html",
    "title": "Structuring data",
    "section": "",
    "text": "Exercise\nImagine you want to count how many times each nucleotide appears in a DNA string like this one: 'ATGCCGATTAA'. One way to proceed an account of this is in the form of a dictionary where the keys represent the different values we want to count (in this case 'A', 'T', 'C' and 'G'). The values associated with each key is the number of times we have seen that key (nucleotide). So we want to end up with a dictionary like this one (not necessarily with key-value pairs in this order):\nRemind yourself how you assign a value to an existing key in a dictionary. Here is some code to get you going:",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Structuring data</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/data_structures.html#general-exercises",
    "href": "lecture_notes/chapters/python/data_structures.html#general-exercises",
    "title": "Structuring data",
    "section": "General exercises",
    "text": "General exercises\n\nBy now you have learned a lot and the general exercises, which serve to keep it all current, get more complicated. But remember: even though the code may mix lists, for-loops, and functions, the rules for lists, for-loops and functions are not mixed. The separate simple rules for a list, a for-loop and a function are still the same. If you get confused, it is time revisit the sections about each separate topic. You will probably have to do that many times during the course.\n\n\nExercise\nWrite a function, square_numbers, that takes a list of numbers as argument and returns a new list with the numbers squared.\n# write your function definition here ...\n\nnumbers = [1, 5, 3, 7]\n\n# then you can call it like this:\nsquared = squared_numbers(numbers)\n\n\nExercise\nWrite a function count_characters, which takes a string argument and returns a dictionary with the counts of each character in the string. When you call the function like this:\ncount_characters('banana')\nit must return (not necessarily with key-value pairs in that order):\n{'n': 2, 'b': 1, 'a': 3}\nThe technique you should use is the one you learned in @sec:dict_count. Here we just iterate over a string of characters instead of over a list of numbers. Here is a bit of code to help you along…\ndef count_characters(text):\n    counts = {}\n    # fill in the missing code ...\n\n    return counts\n\n\nExercise\nUse the function you made in the previous exercise to construct the following data structure:\n{ 'banana': {'b': 1, 'a': 3, 'n': 2},\n  'apple': {'a': 1, 'e': 1, 'p': 2, 'l': 1}, \n  'ananas': {'a': 3, 's': 1, 'n': 2} }\nfrom this list:\n['banana', 'ananas', 'apple']\nHere is some code to help you along:\nmy_database = {}\nfor word in ['banana', 'ananas', 'apple']:\n    my_database[word] =  # you figure this out...\nOnce you are done, what value do you think my_database['banana'] represents? I.e. what will it reduce to if used in an expression? And what value does my_database['banana']['a'] represent?\n\n\nExercise\nRead the code below and make sure you understand each single step before you write any of it. Revisit previous sections if you must, go look in the Python documentation. Then write and run the code - and enjoy that it was exactly what you expected.\ndef get_words(text, search_string):\n    hits = []\n    for word in text.split():\n         if search_string in word:\n            hits.append(word)\n    return hits\n    \ns = 'eenie meenie minie moe'\nnie_words = get_words(s, 'nie')\nm_words = get_words(s, 'm')\n\nprint(' '.join(nie_words))\nprint(' '.join(m_words))\n\n\nExercise\nThis larger will take you through some of the most common string manipulations. A palindrome is a string that is spelled the same way backward and forwards.\nWrite a function, is_palindrome, which takes one argument:\n\nA string.\n\nThe function must return:\n\nTrue if the string argument is a palindrome and False otherwise.\n\nExample usage:\nis_palindrome('abcba')\nshould return True and\nis_palindrome('foo')\nshould return False\nOne approach to this is to run through s from the first to the middle character and for each character check if the character is equal to the character at the same index from the right rather than the left. Remember that the first character of a string is at index 0 and the last at index -1, the second character is at index 1 and the second last at index -2 and so forth.\nSince you need to run through the string from the first to the middle character you first need to figure out how many characters that corresponds to. Say your palindrome is \"ACTGTCA\", then the number of indexes you need to loop over with a for loop is:\ns = \"ACTGTCA\"\nnr_indexes = len(s)//2 \nFigure out how to make range() return indexes you can use to access the characters in the first half of the sequence. Then make a for loop where you iterate over the indexes you get from range(). Try to make the for-loop print out the first half of the characters, just to make sure you are using the right indexes.\nOnce you get this far you need to compare each character from the first half of the corresponding ones starting from the other end of the palindrome. Figure out how to change each index used for the first half to the corresponding index for the other half so you can compare the relevant pairs. (You need to compare index 0 with -1, 1 with -2 and so on…)\nNow try to make the for-loop print both the character from the first half and the corresponding character from the other end. If you got the indexes right you will see that the A print with the A from the other end, the C with the C and so on.\nWrite an if-statement in the for-loop that tests if the two corresponding characters are the same. If the string is a palindrome, then each pair is identical. So as soon as you see a pair which is not identical, you know it is not a palindrome and you can let your function return False like this:\nif left_character != right_character:\n    return False\nRemember that the function ends as soon as it encounters a return statement.\nIf all pairs pass the test, it means that the string is a palindrome, and the function should return True when exiting the for-loop.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Structuring data</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/unleash_your_functions.html",
    "href": "lecture_notes/chapters/python/unleash_your_functions.html",
    "title": "Unleash your functions",
    "section": "",
    "text": "Recursion\nPLACEHOLDER PAGE",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Unleash your functions</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/unleash_your_functions.html#divide-and-conquer",
    "href": "lecture_notes/chapters/python/unleash_your_functions.html#divide-and-conquer",
    "title": "Unleash your functions",
    "section": "Divide and conquer",
    "text": "Divide and conquer\nPLACEHOLDER PAGE\n\nExercise\nPLACEHOLDER PAGE",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Unleash your functions</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/testing_your_code.html",
    "href": "lecture_notes/chapters/python/testing_your_code.html",
    "title": "Testing your code",
    "section": "",
    "text": "Why test your code?\nThere are tons of reasons why you should test your code. Here are what I think are the two most important ones:\nTesting of code is a big thing in programming. Professional consistently test their code. In time you will too, but in this course, you will only do the very basic testing yourself. Instead, you will have access to readymade testing suites made especially for each of your programming projects.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Testing your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/testing_your_code.html#why-test-your-code",
    "href": "lecture_notes/chapters/python/testing_your_code.html#why-test-your-code",
    "title": "Testing your code",
    "section": "",
    "text": "Makes you think: Testing forces you to slow down and think about exactly what the code is supposed to do. By deciding what tests to do before you start coding, you try to anticipate errors and cases that are not covered by the way you want to solve the problem at hand. The notion of falsification is important in science and in coding too. The idea is that you should try to prove that your idea is wrong and only consider it valid only if this process fails. So testing motivates you to think about ways to break their code, thereby helping you solve your programming problem in a way that is general and robust so that it does exactly what you expect it to do.\nGives you peace of mind: Testing increases your confidence that a function you have written actually works as it is supposed to so that you can now stop thinking about how it is implemented and focus on using it as a component in solving a larger problem. Having set up a series of tests also allows you to change and improve the implementation of your function without having to worry that it stops working they way it is supposed to. As long as it passes all the tests is should be ok.",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Testing your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/testing_your_code.html#basic-testing",
    "href": "lecture_notes/chapters/python/testing_your_code.html#basic-testing",
    "title": "Testing your code",
    "section": "Basic testing",
    "text": "Basic testing\nSay that you are asked to make a function that takes a string argument and returns True if that string is a palindrome and False otherwise (hypothetical example). Then you start thinking about which strings should make the function should return True and which should return False. Once you have defined you is_palindrome function you can set up some fairly obvious tests like this:\nprint(is_palindome('123321') == True)\nprint(is_palindome('ATGGTA') == True)\nprint(is_palindome('ATGATG') == False)\nprint(is_palindome('XY') == False)\nBut if you keep thinking, maybe you come up with more tests to cover all the different types of cases you may encounter:\nprint(is_palindome('12321') == True) # uneven length\nprint(is_palindome('121') == True) # uneven length\nprint(is_palindome('AA') == True)\nprint(is_palindome('A') == True) # single char",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Testing your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/testing_your_code.html#the-project-testing-utility",
    "href": "lecture_notes/chapters/python/testing_your_code.html#the-project-testing-utility",
    "title": "Testing your code",
    "section": "The project testing utility",
    "text": "The project testing utility\nTo keep you focused on the programming part, each of the programming projects that you will do in this course comes with a ready-made suite of tests of the functions you are asked to implement. So for each function, you can run tests to make sure it implements the behaviour it is supposed to.\nEach project comes with two files that you download from the course page. They have their names for a good reason, so do not change them. In the first project about translating DNA, they are called translationproject.py and test_translationproject.py.\nTo be able to test your functions, you must write your code in the file called translationproject.py. To run your code you type this in the Terminal as usual:\npython translationproject.py\nTo test the functions as you complete each one, you can run the test script test_translationproject.py like this:\npython test_translationproject.py\nThe code in test_translationproject.py reads your code in translationproject.py and performs a series of tests of each function. When you run the test script four things may happen depending on the state of your code:\nCase 1: If you did not yet implement all the functions, the test script will remind you (once for each test) that you did not implement the functions with the names required.\n*********************************************************\nATTENTION! The following functions are not defined:\n\n    translate_codon\n    split_codons\n    translate_orf\n\nThese functions are either not correctly named (spelled)\nor not defined at all. They will be marked as FAILED.\nCheck your spelling if this is not what you intend.\n*********************************************************\n\nRan 16 tests in 0.000s\n\nOK (skipped=14)\nIf you have implemented a function but misspelled its name, you will also get this type of reminder. The reminders are meant as a safeguard to ensure that you do not hand in the assignment with missing or misspelled function definitions.\nCase 2: If a test for one the functions you have written fails, the testing is aborted and the script prints some information to help you understand what the problem could be. Say you wrote the function translate_codon wrongly so that it always returns M for some reason:\ndef translate_codon(codon):\n    return 'M' # crazy\nthen you would get this message:\nFAILED TEST CASE: test_translate_codon_2\n\nMESSAGE:\n    The call:\n\n        translate_codon('TAA')\n\n    returned:\n\n        'M'\n\n    However, it should return:\n\n        '*'\n\n======================================================================\nRan 4 tests in 0.001s\n\nFAILED (failures=1)\nIt is now left to you to figure out why your function returns the wrong value when called with these arguments.\nCase 3: If you defined all functions correctly and they all work the way they are supposed to, then the test script just prints:\nRan 14 tests in 0.140s\n\nOK",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Testing your code</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/python/using_code_from_other_files.html",
    "href": "lecture_notes/chapters/python/using_code_from_other_files.html",
    "title": "A module is a file with code {-} –>",
    "section": "",
    "text": "]{.hidden .quarto-markdown-envelope-contents render-id=“quarto-int-sidebar:/lecture_notes/chapters/python/using_code_from_other_files.html&lt;span-class=‘chapter-number’&gt;19–&lt;span-class=‘chapter-title’&gt;A-module-is-a-file-with-code-{-}—&gt;”} Using code in other files Programming projects 20  Project: Translating open reading frames 21  Project: Primer analysis 22  Project: Pairwise global alignment 23  Project: Codon usage in Streptococcus bacteria 24  Project: Identifying the subtype of an HIV sequence 25  Project: Clustering sequences based on distance ⁕ 26  Project: Finding genes in bacteria 27  Project: Genome assembly Recordings 28  Week 1 Lecture notes 19  A module is a file with code {-} –&gt; :::",
    "crumbs": [
      "Lecture notes",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>A module is a file with code {-} --></span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/translation_project.html",
    "href": "lecture_notes/chapters/project/translation_project.html",
    "title": "Project: Translating open reading frames",
    "section": "",
    "text": "Translating a single codon\nWrite a function, translate_codon that takes one argument:\nThe function should return:\nExample usage:\nshould return\nBefore you start coding you should always outline for yourself intuitively what you need to do to complete the task at hand. In this case want to translate, or map, between a three letter string, codon, and the corresponding one letter string for the amino acid that the codon corresponds to. Notice that the keys in the codon_map dictionary are in upper case, so you must make sure that the keys you use are also in upper case. You can translate codon into an upper case version of itself using the upper() method.\nTry this out first:\nNow write the function so it uses the string parameter as a key to look up the corresponding amino acid letter and returns this letter. Before you go on, make a function that does only that.\nBefore you are completely done you need to make your function handle the situation when the argument to the function is not a key in the codon_map dictionary. Use an if-else construct to handle the two cases. The boolean expression must test if the function argument is a key in codon_map. Remember that you can use the in operator to do this.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Project: Translating open reading frames</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/translation_project.html#translating-a-single-codon",
    "href": "lecture_notes/chapters/project/translation_project.html#translating-a-single-codon",
    "title": "Project: Translating open reading frames",
    "section": "",
    "text": "A string, which is a codon.\n\n\n\nA string of length one (one character). If the string argument is a valid codon then this letter should the be an amino acid letter specified by the codon_map dictionary. Note that stop codons are represented by a star ('*'). If the string argument is not a valid codon, the function must return '?'.\n\n\ntranslate_codon('ACG')\n\n'T'\n\n\ncodon = 'TTG'\namino_acid = codon_map[codon]\nprint(amino_acid)",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Project: Translating open reading frames</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/translation_project.html#splitting-an-open-reading-frame-into-codons",
    "href": "lecture_notes/chapters/project/translation_project.html#splitting-an-open-reading-frame-into-codons",
    "title": "Project: Translating open reading frames",
    "section": "Splitting an open reading frame into codons",
    "text": "Splitting an open reading frame into codons\nTo translate an entire open reading frame into the corresponding amino acid sequence, you need to split the ORF sequence into codons. When we have done that we can translate each codon using the function translate_codon you just wrote.\nWrite a function, split_codons, that takes one argument:\n\nA string, which is an ORF sequence\n\nThe function must return:\n\nA list of strings. Each string must have length 3 and must represent the-non overlapping triplets in the same sequence as they appear in the string given as argument.\n\nExample usage:\nsplit_codons('ATGTATGCCTGA')\nshould return\n['ATG', 'TAT', 'GCC', 'TGA']\nDivide the problem into simpler tasks like above. You need to loop over the sequence to perform operations on it. Start by writing a function that prints each character:\ndef split_codons(orf):\n    for i in range(len(orf)):\n        print(orf[i])\nNow try to figure out how you can modify the function to make it move over the sequence in jumps of three. Look at the documentation for the range function to see how you can make it iterate over numbers with increments of three like this: 0, 3, 6, 9, 12, … . Modify your function so that it now prints every third character.\nWhat you want is obviously not every third character. You want three characters. I.e. every third character and the two characters that come right after. You can use the index in the for loop to get the corresponding codon using slicing. Modify your function so that it prints each codon.\nNow all that remains is to put each codon on a list that you can return from the function. You can define a list before your for-loop so you have a list to add codons to.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Project: Translating open reading frames</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/translation_project.html#translating-an-open-reading-frame",
    "href": "lecture_notes/chapters/project/translation_project.html#translating-an-open-reading-frame",
    "title": "Project: Translating open reading frames",
    "section": "Translating an open reading frame",
    "text": "Translating an open reading frame\nNow you can use the two functions split_codons and translate_codon to write a function that translates an ORF into a protein sequence.\nWrite a function, translate_orf, that takes one argument:\n\nA string, which is a DNA sequence.\n\nThe function must return\n\nA string, which is the protein sequence translated from the ORF sequence argument.\n\nExample usage:\ntranslate_orf('ATGGAGCTTANCAAATAG')\nshould return\n'MEL?K*'",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>Project: Translating open reading frames</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/folding_project.html",
    "href": "lecture_notes/chapters/project/folding_project.html",
    "title": "Project: Primer analysis",
    "section": "",
    "text": "Count the number of bases in your candidate primer\nBefore you can compute the melting temperature, you need to determine how many times each base occurs in the sequence. You can assume that the only characters in the string are A, T, G, and C.\nWrite a function, count_bases, which takes one argument:\nThe function must return:\nExample usage: If the function is called like this:\nthen it should return (not necessarily with key-value pairs in the same order):",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Project: Primer analysis</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/folding_project.html#count-the-number-of-bases-in-your-candidate-primer",
    "href": "lecture_notes/chapters/project/folding_project.html#count-the-number-of-bases-in-your-candidate-primer",
    "title": "Project: Primer analysis",
    "section": "",
    "text": "A string, which is a DNA sequence.\n\n\n\nA dictionary, which in which keys are strings that represent bases and values are integers that represent the number of occurrences of each base. If a base is not found in the sequence, its count must be zero.\n\n\ncount_bases(\"ATGG\")\n\n{\"A\": 1, \"C\": 0, \"G\": 2, \"T\": 1}",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Project: Primer analysis</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/folding_project.html#compute-the-melting-temperature",
    "href": "lecture_notes/chapters/project/folding_project.html#compute-the-melting-temperature",
    "title": "Project: Primer analysis",
    "section": "Compute the melting temperature",
    "text": "Compute the melting temperature\nKnowing the base composition in your sequence, you can now calculate the melting temperature the double-stranded DNA that forms when your primer pairs up with the sequence to amplify. If the primer has less than 14 bases the formula for calculating melting temperature is:\n\\[ Temp = (A + T) * 2 + (G + C) * 4 \\]\nand if the primer has 14 bases or more it is calculated like this:\n\\[ Temp = 64.9 + 41 * (G + C - 16.4) / (A + T + G + C) \\]\nThe A, T, C, and G in the formulas represent the numbers of A, T, C and G in the DNA primer.\nYou must write a function that applies these two formulas appropriately by taking the length of the primer into account.\nWrite a function, melting_temp, which takes one argument:\n\nA string, which is a DNA sequence (your primer).\n\nThe function must return:\n\nA number, which represents the melting temperature of the double-stranded DNA corresponding to the DNA string given as argument.\n\nExample usage: If the function is called like this:\nmelting_temp(\"ATG\")\nthen it should return:\n8",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Project: Primer analysis</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/folding_project.html#reverse-complement-the-sequence",
    "href": "lecture_notes/chapters/project/folding_project.html#reverse-complement-the-sequence",
    "title": "Project: Primer analysis",
    "section": "Reverse complement the sequence",
    "text": "Reverse complement the sequence\nIt is possible that one part of the primer forms base pairs with another part of the primer to form a hairpin structure. To figure out if this can happen to your primer, you need to be able to find the reverse complement of DNA sequence. The reverse complement of a DNA sequence is one where the sequence of bases is first reversed, and then each base is replaced with its Watson-Crick complementary base.\nWrite a function, reverse_complement, which takes one argument:\n\nA string, which is a DNA sequence.\n\nThe function must return:\n\nA string, which represents the reverse complement of the DNA string given as argument.\n\nExample usage: If the function is called like this:\nreverse_complement(\"AATTC\")\nthen it should return:\n\"GAATT\"",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Project: Primer analysis</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/folding_project.html#check-for-hairpins",
    "href": "lecture_notes/chapters/project/folding_project.html#check-for-hairpins",
    "title": "Project: Primer analysis",
    "section": "Check for hairpins",
    "text": "Check for hairpins\nYou would like to be able to determine if your primer can fold to form a hairpin with some specified minimum number of consequtive base pairs. We assume that hairpin loops are always at least four bases long and that base pairs in the hairpin can only be Watson-Crick basepairs. Here is an example of a hairpin with five basepairs and a loop of four bases (four Cs):\n        C C\n      C     C\n       A - T\n       T - A\n       A - T\n       T - A\n       A - T\nTo test if a sequence can form a hairpin with at least four consequtive base pairs, you need to test if the sequence contains any subsequence of length four whose reverse complement is identical to another nonoverlapping subsequence. To take into account that the hairpin loop is at least four bases long, any such two subsequences must be separated by at least four bases.\nWrite a function, has_hairpin, which takes two arguments:\n\nA string, which is a DNA sequence.\nAn integer, which represents the minimum number of consequtive base pairs in the hairpins to search for.\n\nThe function must return:\n\nTrue if the sequence contains a hairpin of at least the specified length and False otherwise.\n\nExample usage: If the function is called like this:\nprint(has_hairpin(\"ATATACCCCTATAT\", 4))\nthen it should return:\nTrue\nThis is a hard one, so I will give you a bit of help. Here is the function with some parts missing.\ndef has_hairpin(s, k):\n    looplen = 4\n    for i in range(len(s)-k+1):\n        subs = # Hint A\n        right = # Hint B\n        revcl = reverse_complement(subs)\n        if revcl in right[looplen:]:\n            return True\n    return False\nHint A: Here you need to extract a substring of length k starting at i. Hint B: Here you need to extract all the sequence to the right of substr.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Project: Primer analysis</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/alignment_project.html",
    "href": "lecture_notes/chapters/project/alignment_project.html",
    "title": "Project: Pairwise global alignment",
    "section": "",
    "text": "Filling in the dynamic programming matrix",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Project: Pairwise global alignment</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/alignment_project.html#filling-in-the-dynamic-programming-matrix",
    "href": "lecture_notes/chapters/project/alignment_project.html#filling-in-the-dynamic-programming-matrix",
    "title": "Project: Pairwise global alignment",
    "section": "",
    "text": "Make a matrix\nWe start out by making a list of lists (a matrix) that has the right shape but only holds None values. We use the None values as place-holders, which you can later replace with scores. You can think of it as an empty matrix that you can fill scores into, just as we did at the lectures. If you want to align two sequences like AT and GAT you want a matrix that has 3 rows and 4 columns. Note that the matrix must have one more row than the number of bases in sequence one, and one more column than the number of bases in sequence two.\nWrite a function, empty_matrix, that takes two arguments\n\nAn integer (which represents the length of sequence one + 1).\nAn integer (which represents the length of sequence two + 1).\n\nThe function must return:\n\nA list of lists. The number of sub-lists be must equal to the first integer argument. Each sublist must contain a number of None values equal to the second integer argument.\n\nExample usage:\nempty_matrix(3, 4)\nreturns a list with three lists each of length four:\n[[None, None, None, None], [None, None, None, None], [None, None, None, None]]\nEven though this is a list of lists we can think of it as a three by four matrix:\n[[None, None, None, None], \n [None, None, None, None], \n [None, None, None, None]]\nIf you want to print the matrix in a way that looks like the slides I showed you at the lecture, you can use the print_dp_matrix function (again None represents empty cells):\n          G    A    T\n  None None None None\nA None None None None\nT None None None None\nImportant: You can implement empty_matrix in a way superficially looks ok but will cause you all kinds of grief when you start filling it in. When you create the list of lists (e.g. three lists as above) you need to generate and add three separate lists. If you add the same list three times you do not have three separate rows in your matrix. Instead you have three references to the same row. You can test if you did it right this way – by changing the value of one cell to see what happens:\nempty = empty_matrix(3, 4)\nempty[0][0] = 'Mogens'\nprint(empty)\nIf this only changed one value like below, you are ok:\n[['Mogens', None, None, None], [None, None, None, None], [None, None, None, None]]\nIf it changed the first value in all the lists, it means that all your lists are the same (which is not what you want).\n[['Mogens', None, None, None], ['Mogens', None, None, None], ['Mogens', None, None, None]]\n\n\nFill top row and left column\nNow that you can make a matrix with the correct dimensions, you need to write a function that fills in the top row and the left column in accordance with what the gap score is. E.g. if the gap score is -2 you want the matrix to look something like this when you print it with print_dp_matrix:\n          G    A    T\n     0   -2   -4   -6\nA   -2 None None None\nT   -4 None None None\nWrite a function, prepare_matrix, which takes three arguments:\n\nAn integer (which represents the length of sequence one plus one)\nAn integer (which represents the length of sequence two plus one)\nAn integer, which represents the gap_score used for alignment.\n\nThe function must return:\n\nA list of lists. The number of sub-lists be must equal to the first integer argument. The values in the first sub-list must be multiples of the gap score given as the third argument. The first elements of remaining sub-lists must be multiples of the gap score. All remaining elements of sub-lists must be None.\n\nExample usage:\nprepare_matrix(3, 4, -2)\nmust return:\n[[0, -2, -4, -6], [-2, None, None, None], [-4, None, None, None]]\nHint: You should call empty_matrix inside prepare_matrix to get a matrix filled with None.\nNow all you need to do is replace the right None values with multiples of the gap score. E.g. the third element in the first sub-list is matrix[2][0], which you would need to assign the value: 2 times the gap score. In the same way matrix[3][0] should be 3 times the gap score. So you need to figure out which elements you should replace and which pairs of indexes you need to access those elements. Then use range to generate those indexes and for-loops to loop over them.\n\n\nFill the entire matrix\nNow that we are able to fill the top row and left column we can start thinking about how to fill the whole matrix.\nFor that we need a score matrix of match scores. In Python that is most easily represented as a dictionary of dictionaries like this:\nmatch_scores = {'A': {'A': 2, 'T': 0, 'G': 0, 'C': 0},\n                'T': {'A': 0, 'T': 2, 'G': 0, 'C': 0},\n                'G': {'A': 0, 'T': 0, 'G': 2, 'C': 0},\n                'C': {'A': 0, 'T': 0, 'G': 0, 'C': 2}}\nThat lets you get the score for matching an A with a T like this: match_scores['A']['T']. Note that the match scores are only for uppercase letters (A, T, G, C).\nWrite a function, fill_matrix, which takes four arguments:\n\nA string, which represents the first sequence.\nA string, which represents the second sequence.\nA dictionary of dictionaries like the one shown above, which represents match scores.\nAn integer, which represents the gap score.\n\nThe function must return:\n\nA list of lists of integers, which represents a correctly filled dynamic programming matrix given the two sequences, the match scores, and the gap score.\n\nExample usage: If match_scores is defined as above then\nfill_matrix('AT', 'GAT', match_scores, -2)\nmust return:\n[[0, -2, -4, -6], [-2, 0, 0, -2], [-4, -2, 0, 2]]\nIf you print that matrix using print_dp_matrix it should look like this:\n      G  A  T\n   0 -2 -4 -6\nA -2  0  0 -2\nT -4 -2  0  2\nHint: You should call prepare_matrix inside fill_matrix to get a matrix with the top row and left column filled. Assuming seq1 is sequence one and seq2 is sequence two then you can do it like this:\nmatrix = prepare_matrix(len(seq1)+1, len(seq2)+1, gap_score)\nNow you only need to fill out the rest. To produce the indexes of the elements in the list of lists that you need to assign values to, you need two nested for-loops.\nfor i in range(1, len(seq1)+1):\n    for j in range(1, len(seq2)+1):\n        print(i, j) # just to see what i and j are\nExamine this code and make sure you understand why we give those arguments to range. Each combination of i and j let you access an element matrix[i][j] in matrix (list of lists) that you can to assign a value to. The value to assign to matrix[i][j] (green cell on the slides) is the maximum of three values (the yellow cells on the slide):\n\nThe value of the cell to the left (matrix[i][j-1]) plus the gap score.\nThe cell above (matrix[i-1][j]) plus the gap score.\nThe diagonal cell (matrix[i-1][j-1]) plus the match score for base number i (index i-1) of sequence one and base number j (index j-1) of sequence two.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Project: Pairwise global alignment</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/alignment_project.html#reconstructing-the-optimal-alignment",
    "href": "lecture_notes/chapters/project/alignment_project.html#reconstructing-the-optimal-alignment",
    "title": "Project: Pairwise global alignment",
    "section": "Reconstructing the optimal alignment",
    "text": "Reconstructing the optimal alignment\nThis is the most difficult part, so I will hold your hand here. Below is first a function that identifies which of three cells (the yellow cells on the slides) some cell (green cell on the slides) is derived from. On the slides, this is the cell pointed to by the red arrow.\ndef get_traceback_arrow(matrix, row, col, match_score, gap_score):\n\n    # yellow cells:\n    score_diagonal = matrix[row-1][col-1]\n    score_left = matrix[row][col-1]\n    score_up = matrix[row-1][col]\n\n    # gree cell:\n    score_current = matrix[row][col]\n\n    if score_current == score_diagonal + match_score:\n        return 'diagonal'\n    elif score_current == score_left + gap_score:\n        return 'left'\n    elif score_current == score_up + gap_score:\n        return 'up'\nWrite (no copy paste) this into your file and make sure that it works and that you understand exactly how it works before you go on.\nHere is a function that uses get_traceback_arrow to do the traceback. It reconstructs the alignment starting from the last column adding columns in front as the traceback proceeds. It is big, so it breaks across three pages.\ndef trace_back(seq1, seq2, matrix, score_matrix, gap_score):\n\n    # Strings to store the growing alignment strings:\n    aligned1 = ''\n    aligned2 = ''\n# continues...\n    # The row and col index of the bottom right cell:\n    row = len(seq1)\n    col = len(seq2)\n\n    # Keep stepping backwards through the matrix untill\n    # we get to the top row or the left col:\n    while row &gt; 0 and col &gt; 0:\n\n        # The two bases we available to match:\n        base1 = seq1[row-1]\n        base2 = seq2[col-1]\n\n        # The score for mathing those two bases:\n        match_score = score_matrix[base1][base2]\n\n        # Find out which cell the score in the current cell was derived from:\n        traceback_arrow = get_traceback_arrow(matrix, row, col, match_score, gap_score)\n\n        if traceback_arrow == 'diagonal':\n                # last column of the sub alignment is base1 over base2:\n            aligned1 = base1 + aligned1\n            aligned2 = base2 + aligned2\n            # next cell is the diagonal cell:\n            row -= 1\n            col -= 1\n        elif traceback_arrow == 'up':\n                # last column in the sub alignment is base1 over a gap:\n            aligned1 = base1 + aligned1\n            aligned2 = '-' + aligned2\n            # next cell is the cell above:\n            row -= 1\n        elif traceback_arrow == 'left':\n                # last column in the sub alignment is a gap over base2:\n            aligned1 = '-' + aligned1\n            aligned2 = base2 + aligned2\n            # next cell is the cell to the left:\n            col -= 1\n# continues...\n    # If row is not zero, step along the top row to the top left cell:\n    while row &gt; 0:\n        base1 = seq1[row-1]\n        aligned1 = base1 + aligned1\n        aligned2 = '-' + aligned2\n        row -= 1\n\n    # If col is not zero, step upwards in the left col to the top left cell:\n    while col &gt; 0:\n        base2 = seq2[col-1]\n        aligned1 = '-' + aligned1\n        aligned2 = base2 + aligned2\n        col -= 1\n\n    return [aligned1, aligned2]\nOnce you have written it into your file, make sure you understand the correspondence to the sequences of events on the lecture slides.\nNow you can write a function you can call to do perform the alignment. You get to do that yourself. It just calls fill_matrix and then trace_back to get the optimal alignment\nWrite a function, align, that takes four arguments:\n\nA string, which represents sequence one.\nA string, which represents sequence two.\nA dictionary of dictionaries, which represents the match scores (as described above).\nAn integer, which represents the gap score.\n\nThe function must return:\n\nA list of length two. The first element of that list must be a string, representing the aligned sequence one. The second element must be a string, representing the aligned sequence two.\n\nExample usage:\nalign('ATAT', 'GATGAT', score_matrix, -2)\nmust return:\n['-AT-AT', 'GATGAT']\nOnce you have written that function you can print your alignment like this:\nalignment = align('ATAT', 'GATGAT', score_matrix, -2)\nfor s in alignment:\n    print(s)",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Project: Pairwise global alignment</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/codonbias_project.html",
    "href": "lecture_notes/chapters/project/codonbias_project.html",
    "title": "Project: Codon usage in Streptococcus bacteria",
    "section": "",
    "text": "Read an open reading frame and count its codons",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Project: Codon usage in *Streptococcus* bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/codonbias_project.html#read-an-open-reading-frame-and-count-its-codons",
    "href": "lecture_notes/chapters/project/codonbias_project.html#read-an-open-reading-frame-and-count-its-codons",
    "title": "Project: Codon usage in Streptococcus bacteria",
    "section": "",
    "text": "Read ORFs from a file\nYou can use this code to read the ORFs into your script:\nf = open('sample_orfs.txt', 'r')\norf_list = list()\nfor line in f:\n    seq = line.strip()\n    orf_list.append(seq)\nf.close()\nTry to print the list to see it. Then pick out the first ORF in the list so you can use that to test your code:\ntest_orf = orf_list[0]\n\n\nSplit the ORF into codons\nYou need a function that splits the ORF into codons. This one you have already implemented in the exercise about translating DNA – and if, not here it is in my version to get you started.\ndef split_codons(orf):\n    codon_list = []\n    for i in range(0, len(orf)-2, 3):\n        codon_list.append(orf[i:i+3])\n    return codon_list\nBefore you go on, make sure you understand/remember how this function works and what it returns.\n\n\nCount codons in an ORF\nNow you need to count the number of times each codon occurs in the ORF.\nWrite a function, count_codons, that take one argument:\n\nA string, which represents the open reading frame.\n\nThe function must return:\n\nA dictionary where keys are strings representing codons and associated values are integers representing the number of times each codon occurs in the ORF given as argument.\n\nExample usage:\ncount_codons(\"ATGTCATCATGA\")\nshould return:\n{'CTT': 0, 'ATG': 1, 'ACA': 0, 'ACG': 0, 'ATC': 0, 'AAC': 0, \n 'ATA': 0, 'AGG': 0, 'CCT': 0, 'ACT': 0, 'AGC': 0, 'AAG': 0, \n 'AGA': 0, 'CAT': 0, 'AAT': 0, 'ATT': 0, 'CTG': 0, 'CTA': 0, \n 'CTC': 0, 'CAC': 0, 'AAA': 0, 'CCG': 0, 'AGT': 0, 'CCA': 0, \n 'CAA': 0, 'CCC': 0, 'TAT': 0, 'GGT': 0, 'TGT': 0, 'CGA': 0, \n 'CAG': 0, 'TCT': 0, 'GAT': 0, 'CGG': 0, 'TTT': 0, 'TGC': 0, \n 'GGG': 0, 'TAG': 0, 'GGA': 0, 'TGG': 0, 'GGC': 0, 'TAC': 0, \n 'TTC': 0, 'TCG': 0, 'TTA': 0, 'TTG': 0, 'TCC': 0, 'ACC': 0, \n 'TAA': 0, 'GCA': 0, 'GTA': 0, 'GCC': 0, 'GTC': 0, 'GCG': 0, \n 'GTG': 0, 'GAG': 0, 'GTT': 0, 'GCT': 0, 'TGA': 1, 'GAC': 0, \n 'CGT': 0, 'GAA': 0, 'TCA': 2, 'CGC': 0}\n– though not necessarily with key-value pairs in that order.\nIn the function, you should use the split_codons function to split the ORF into a list of codons. Then create an empty dictionary that you can populate with counts. You want all the possible codons to be in your dictionary. That way, the codons you do not find in your ORF will have a count of 0. In this case, such absence is also valuable information. To achieve this you must start by filling the dictionary with a key for each codon and give each a count of 0. You can do that by iterating over the keys in the dictionary that maps codons to amino acids. Then you must iterate over all the codons in the list of codons produced by the split_codons function and add counts to the dictionary as you go.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Project: Codon usage in *Streptococcus* bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/codonbias_project.html#group-codon-counts-by-amino-acid",
    "href": "lecture_notes/chapters/project/codonbias_project.html#group-codon-counts-by-amino-acid",
    "title": "Project: Codon usage in Streptococcus bacteria",
    "section": "Group codon counts by amino acid",
    "text": "Group codon counts by amino acid\nHaving counted how many times each codon appears in the ORF, you need to group the counted codons by the amino acid they encode.\nWrite a function, group_counts_by_amino_acid, which takes one argument:\n\nA dictionary, as that returned by count_codons.\n\nThe function must return:\n\nA dictionary of dictionaries, which pairs each amino acid with a dictionary with counts of how many times each codon is used to encode that amino acid in the ORF.\n\nExample usage: Assuming counts is the dictionary returned by count_codons as in the previous example.\ngrouped_counts = group_counts_by_amino_acid(counts)\nthen group_counts_by_amino_acid should return:\n{'A': {'GCA': 0, 'GCC': 0, 'GCT': 0, 'GCG': 0}, \n 'C': {'TGC': 0, 'TGT': 0}, \n 'E': {'GAG': 0, 'GAA': 0}, \n 'D': {'GAT': 0, 'GAC': 0}, \n 'G': {'GGT': 0, 'GGG': 0, 'GGA': 0, 'GGC': 0}, \n 'F': {'TTC': 0, 'TTT': 0}, \n 'I': {'ATT': 0, 'ATC': 0, 'ATA': 0}, \n 'H': {'CAC': 0, 'CAT': 0}, \n 'K': {'AAG': 0, 'AAA': 0}, \n '*': {'TAG': 0, 'TGA': 1, 'TAA': 0}, \n 'M': {'ATG': 1}, \n 'L': {'CTT': 0, 'CTG': 0, 'CTA': 0, 'CTC': 0, 'TTA': 0, 'TTG': 0}, \n 'N': {'AAT': 0, 'AAC': 0}, \n 'Q': {'CAA': 0, 'CAG': 0},\n 'P': {'CCT': 0, 'CCG': 0, 'CCA': 0, 'CCC': 0}, \n 'S': {'TCT': 0, 'AGC': 0, 'TCG': 0, 'AGT': 0, 'TCC': 0, 'TCA': 2}, \n 'R': {'AGG': 0, 'CGC': 0, 'CGG': 0, 'CGA': 0, 'AGA': 0, 'CGT': 0}, \n 'T': {'ACC': 0, 'ACA': 0, 'ACG': 0, 'ACT': 0}, \n 'W': {'TGG': 0}, \n 'V': {'GTA': 0, 'GTC': 0, 'GTT': 0, 'GTG': 0}, \n 'Y': {'TAT': 0, 'TAC': 0}}\n– though not necessarily with key-value pairs in that order.\nSo if we pretend the resulting dictionary of dictionaries is called d, then d['S'] will be a dictionary where keys are codons encoding the ‘S’ amino acid and the values are the counts of those codons. That means that you can access a particular count like this:\nd['S']['TCA'] \nIn the above example, this count is 2. So the task is really just to distribute counts given as the first argument into groups for each amino acid. Depending on what you call your variables it could look something like this:\ngrouped_counts[acid][codon] = codon_counts[codon]\nYour function should begin by defining an empty dictionary to add to. Then use a for-loop to run through all codon/amino-acid pairs and populate your dictionary of dictionaries.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Project: Codon usage in *Streptococcus* bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/codonbias_project.html#turn-counts-into-frequencies",
    "href": "lecture_notes/chapters/project/codonbias_project.html#turn-counts-into-frequencies",
    "title": "Project: Codon usage in Streptococcus bacteria",
    "section": "Turn counts into frequencies",
    "text": "Turn counts into frequencies\nNow you know how many times each codon represents a certain amino acid, but we would like to know with which frequency a certain codon represents an amino acid. So you need to normalize the counts so they become frequencies. You do that by dividing each codon count by the total number of codons encoding the same amino acid. We split the solution to this problem in two. We first write a helper function that turns codon counts for one amino acid into frequencies.\nWrite a function, normalize_counts, which takes one argument:\n\nA dictionary, where keys are strings representing codons and values are integers representing the counts of these codons.\n\nThe function must return:\n\nA dictionary, where keys are strings representing codons and values are floats representing the frequency at which each codon appear. That is, the count of that codon divided by the total of all codon counts in the dictionary. The frequencies for codons that encode the same amino acid must of sum to one. That means that in cases where the total count is zero, the function must return None.\n\nExample usage:\nnormalize_counts({'ATT': 8, 'ATC': 10, 'ATA': 2})\nshould return:\n{'ATC': 0.5, 'ATA': 0.1, 'ATT': 0.4}\n– though not necessarily with key-value pairs in that order.\nNow you have solved part of the task, what remains is to now use that function to normalise the codon counts of each amino acid in your grouped counts:\nWrite a function, normalize_grouped_counts, which takes one argument:\n\nA dictionary of dictionaries, as that returned by group_counts_by_amino_acid.\n\nThe function must return:\n\nA new dictionary of dictionaries where the values of the inner dictionaries are frequencies instead of counts as in the example in the introduction. You should not include amino acids for which there are no counted codons.\n\nExample usage: Assuming gr_counts is the dictionary of dictionaries returned by grouped_group_counts_by_amino_acid in the example above.\nnormalize_grouped_counts(gr_counts)\nshould return:\n{'*': {'TAA': 0.0, 'TGA': 1.0, 'TAG': 0.0}, \n'M': {'ATG': 1.0}, \n'S': {'AGC': 0.0, 'TCG': 0.0, 'TCC': 0.0, 'TCT': 0.0, 'AGT': 0.0, 'TCA': 1.0}}\n– though not necessarily with key-value pairs in that order.\nHere is some help to get you started:\ndef normalize_grouped_counts(grouped_counts):\n    grouped_freqs = {}\n    for aa in grouped_counts:\n        counts = grouped_counts[aa]\nAmino acids with no codon counts should not be part of the data structure. Remember that in this case normalize_counts returns None, so you can simply test if the return value from normalize_counts is None",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Project: Codon usage in *Streptococcus* bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/codonbias_project.html#compute-the-codon-usage",
    "href": "lecture_notes/chapters/project/codonbias_project.html#compute-the-codon-usage",
    "title": "Project: Codon usage in Streptococcus bacteria",
    "section": "Compute the codon usage",
    "text": "Compute the codon usage\nNow all that remains is to tie together the functions you have written in a final function that generates your big data structure from an ORF:\nWrite a function, codon_usage, which takes one argument:\n\nA string, which is an ORF.\n\nThe function must return:\n\nA dictionary of dictionaries, same as that returned by normalize_grouped_counts.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Project: Codon usage in *Streptococcus* bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/hiv_project.html",
    "href": "lecture_notes/chapters/project/hiv_project.html",
    "title": "Project: Identifying the subtype of an HIV sequence",
    "section": "",
    "text": "Compute the similarity of two sequences\nWe need to compare our unknown HIV sequence to all the HIV sequences of known subtypes. That way we can identify the sequence of a known subtype that is most similar to your unknown sequence. We will then assume that our unknown sequence has the same subtype as this sequence. To accomplish this we first need to write some code that compares two sequences so we can compare our HIV sequence to each of the other HIV sequences.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Project: Identifying the subtype of an HIV sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/hiv_project.html#compute-the-similarity-of-two-sequences",
    "href": "lecture_notes/chapters/project/hiv_project.html#compute-the-similarity-of-two-sequences",
    "title": "Project: Identifying the subtype of an HIV sequence",
    "section": "",
    "text": "Compare two sequences\nWrite a function sequence_similarity that takes two arguments:\n\nA string which is a DNA sequence.\nA string of the same length as argument one, which is also a DNA sequence.\n\nThe function must return:\n\nA float, which is the proportion of bases that are the same in two DNA sequences.\n\nExample usage:\nsequence_similarity('AGTC' 'AGTT')\nshould return 0.75.\nStart out defining your function like this:\ndef sequence_similarity(seq1, seq2):\n    # your code here...\nRemember that range(len(seq1)) generates the numbers you can use to index the string seq1. You can use those numbers as indexes to look up positions in both strings. You will need a for-loop in your function and a variable that keeps track of how many similarities you have seen as you iterate through the sequences.\n\n\nCompare aligned sequences\nAll sequences, including the unknown sequence, are from the same multiple alignment. This ensures that sequence positions match up across all sequences but also means that a lot of gap characters ('-') are inserted. To compute similarities between such sequences you need to make function much like seqeuence_similarity that does not consider sequence positions where both bases are a gap ('-') characters. In other words, you must not only count the number of characters that are the same, you also need to count how many alignment columns that are \"-\" for both sequences. E.g. the following mini alignment has five such columns and four columns where the bases are the same. So in the following alignment, the similarity is 0.8 (4/5):\nA-CT-A\nA-CTTA\nWrite a function alignment_similarity that takes two arguments:\n\nA string which is a DNA sequence with gap characters.\nA string of the same length as argument one, which is also a DNA sequence with gap characters.\n\nThe function must return:\n\nA float, which is the proportion of bases that are the same in two DNA sequences.\n\nalignment_similarity('A-CT-A', 'A-CTTA')\nshould return 0.8.\nHint: Use an if-statement to test if the two characters at some index are equal to '-' in both sequences. You can use an expression like this:\nseq1[i] == '-' and seq2[i] == '-'\nOnce your function has computed both the number of identical bases and the number of alignment columns that are not both '-', you can have it return the similarity as the ratio of the two.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Project: Identifying the subtype of an HIV sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/hiv_project.html#read-the-hiv-sequences-into-your-program",
    "href": "lecture_notes/chapters/project/hiv_project.html#read-the-hiv-sequences-into-your-program",
    "title": "Project: Identifying the subtype of an HIV sequence",
    "section": "Read the HIV sequences into your program",
    "text": "Read the HIV sequences into your program\nTo use your alignment_similarity function to assess similarity between your unknown sequence and the sequences of known subtype, you need to read the sequences into your program. Here is a function that will read the sequences from one of the files you downloaded into a list:\ndef read_data(file_name):\n    f = open(file_name)\n    sequence_list = list()\n    for line in f:\n        seq = line.strip()\n        sequence_list.append(seq)\n    f.close()\n    return sequence_list\nYou can use that function to read the unknown sequence into your program:\nunknown_list = read_data('unknown_type.txt')\nIn this case, the list only contains the one unknown HIV sequence in unknown_type.txt.\nYou also need to load the typed HIV sequences into your program. Here is a function that returns a dictionary in which the keys are subtypes ('A', 'B', 'C' and 'D') and each value is a lists of sequences with that subtype:\ndef load_typed_sequences():\n    return {'A': read_data('subtypeA.txt'),\n            'B': read_data('subtypeB.txt'),\n            'C': read_data('subtypeC.txt'),\n            'D': read_data('subtypeD.txt') }\nIf you use the function like this:\ntyped_data = load_typed_sequences()\nthen you can access the list of sequences of subtype A like this: typed_data['A'].",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Project: Identifying the subtype of an HIV sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/hiv_project.html#compare-your-hiv-sequence-to-hiv-sequences-of-known-subtype",
    "href": "lecture_notes/chapters/project/hiv_project.html#compare-your-hiv-sequence-to-hiv-sequences-of-known-subtype",
    "title": "Project: Identifying the subtype of an HIV sequence",
    "section": "Compare your HIV sequence to HIV sequences of known subtype",
    "text": "Compare your HIV sequence to HIV sequences of known subtype\nTo type you HIV sequence you must compare your sequence to all the database sequences to see which group has the best matching sequence.\nWrite a function get_similarities that takes two arguments:\n\nA string, which is your unknown HIV sequence.\nA list of strings, each of which is an HIV sequence of known type.\n\nThe function must return:\n\nA list of floats, which should be the similarities between the unknown sequence given as the first argument and the list of sequences given as the second argument.\n\nExample usage:\nget_similarities(unknown_list[0], typed_data['A'])\nshould return:\n[0.8553288474061211, 0.8721742704480066,\n 0.854924397221087, 0.8481709291032696,\n 0.8498330281159108] \nThe function should use the function alignment_similarity to compare your unknown sequence (unknown_list[0]) to each of the sequences of some subtype. Start out like this:\ndef get_similarities(unknown, typed_sequences):\n    # Your code here...\n    \nIn your function you need to define a list that you can append the similarities you compute to:\nsimilarities = []\nThis is the list of results that your function must return. To compute the similarity between you unknown sequence and each of the sequences of known subtype, you can use your alignment_similarity function inside a for-loop.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Project: Identifying the subtype of an HIV sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/hiv_project.html#compute-maximum-similarity-to-each-subtype",
    "href": "lecture_notes/chapters/project/hiv_project.html#compute-maximum-similarity-to-each-subtype",
    "title": "Project: Identifying the subtype of an HIV sequence",
    "section": "Compute maximum similarity to each subtype",
    "text": "Compute maximum similarity to each subtype\nTo predict the subtype of the unknown HIV sequence you need to compare the unknown sequence to all the sequences of each of the different subtypes. The subtype of the sequence with the highest similarity to your unknown sequence is then our predicted subtype (or our best guess).\nWrite a function get_max_similarities that takes two arguments:\n\nA string, which is your unknown HIV sequence.\nA dictionary, like the one returned by load_typed_sequences.\n\nThe function must return:\n\nA dictionary, in which keys are strings representing each subtype ('A', 'B', 'C', and 'D') and values are floats representing the maximum similarity between the unknown sequence and the sequences of a subtype. The dictionary could look like this (it does not, you need to compute the similarities yourself.):\n\n{'A': 0.89, 'B': 0.95, 'C': 0.82, 'D': 0.99}\nTo get the highest number in a list of numbers, you can use the max function in Python. It works like this:\nnumbers = [3, 8, 53, 12, 7]\nprint(max(numbers))  # prints 53\nFor example, to get the highest similarity between the unknown sequence and sequences in typed_data['A']:\nsubtypeA_similarities = get_similarities(unknown_list[0], typed_data['A'])\nsubtypeA_max = max(subtypeA_similarities)",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Project: Identifying the subtype of an HIV sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/hiv_project.html#identify-the-hiv-subtype",
    "href": "lecture_notes/chapters/project/hiv_project.html#identify-the-hiv-subtype",
    "title": "Project: Identifying the subtype of an HIV sequence",
    "section": "Identify the HIV subtype",
    "text": "Identify the HIV subtype\nNow for the grand finale! You ultimately want to be able to write code like this:\nunknown_list = read_data('unknown_type.txt')\ntyped_data = load_typed_sequences()\nsubtype = predict_subtype(unknown_list[0], typed_data)\nprint(\"Patient HIV is subtype {}\".format(subtype))\nSo all you need now is the predict_subtype function.\nWrite a function predict_subtype that takes two arguments:\n\nA string, which is your unknown HIV sequence.\nA dictionary, like the one returned by load_typed_sequences.\n\nThe function must return:\n\nA string of length one (either 'A', 'B', 'C', or 'D') representing the predicted subtype of your unknown HIV sequence.\n\nThe function should use get_max_similarities to compute the dictionary of max similarities and then extract from that dictionary the key with the highest value (similarity). So the function must return 'A' if the unknown sequence is most similar to a sequence of subtype A, 'B' if the unknown sequence is most similar to a sequence of subtype B and so on.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Project: Identifying the subtype of an HIV sequence</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/seqdist_project.html",
    "href": "lecture_notes/chapters/project/seqdist_project.html",
    "title": "Project: Clustering sequences based on distance ⁕",
    "section": "",
    "text": "Measuring sequence distance\nClustering is based on the distances between all pairs of sequences. So before you can build your tree you must compute those distances and fill them into a table like that in the book. Here we break that task into three parts:",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Project: Clustering sequences based on distance ⁕</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/seqdist_project.html#measuring-sequence-distance",
    "href": "lecture_notes/chapters/project/seqdist_project.html#measuring-sequence-distance",
    "title": "Project: Clustering sequences based on distance ⁕",
    "section": "",
    "text": "Compare two sequences\nMake the Jukes-Cantor correction\nGenerate a (lower triangular) distance matrix\n\n\nCompare two sequences\nThe first function you must write is one that finds the proportion of different bases between two sequences:\nWrite a function, sequence_difference, which takes two arguments:\n\nA string, which represents a DNA sequence.\nA string, which represents a DNA sequence of the same length as argument one.\n\nThe function must return:\n\nA float, which represents the proportion of different bases between the two sequences.\n\nExample usage:\nsequence_difference('AAATTAAA', 'AAAAAAAA')\nshould return\n0.25\n\n\nMake the Jukes-Cantor correction\nTo take into account that some substitutions may fall on top of others you must do the Jukes-Cantor correction you read about in the book. The formula is like this:\n\\[ K = -\\frac{3}{4} \\ln(1 - \\frac{4}{3}*D) \\]\nWhere \\(D\\) is the proportion of differences as returned by seqeunce_diff and \\(K\\) is the Jukes-Cantor corrected distance. In the top of seqdistproject.py it already says:\nfrom math import log\nThat line makes the log (logarithm) builtin function from the math python library available to your programme. Try to find its Python documentation to see how you use it.\nWrite a function, jukes_cantor, which takes one argument:\n\nA float, which represents a proportion of different bases between two sequences.\n\nThe function must return:\n\nA float, which represents the Jukes-Cantor corrected distance corresponding the proportion of differences given as argument.\n\nExample usage:\njukes_cantor(0.1)\nshould return\n0.10732563273050497",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Project: Clustering sequences based on distance ⁕</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/seqdist_project.html#lower-triangular-distance-matrices",
    "href": "lecture_notes/chapters/project/seqdist_project.html#lower-triangular-distance-matrices",
    "title": "Project: Clustering sequences based on distance ⁕",
    "section": "Lower triangular distance matrices",
    "text": "Lower triangular distance matrices\nThis project is all about distances between pairs (of sequences), and what would be more natural than to put all the distances in a matrix so you can look up the distance between the sequences with indexes i and j as the matrix element in row i and column j. You already know how matrices can be represented by lists of lists. E.g. a matrix like this:\n0.0  0.1  0.3  0.3  0.1  0.2\n0.1  0.0  0.2  0.4  0.1  0.1\n0.3  0.2  0.0  0.4  0.2  0.3\n0.3  0.4  0.4  0.0  0.2  0.1\n0.1  0.1  0.2  0.2  0.0  0.1\n0.2  0.1   0.3  0.1  0.1 0.0\n\ncan be expressed as a list of lists like this:\n[[0.0, 0.1, 0.3, 0.3, 0.1, 0.2],\n [0.1, 0.0, 0.2, 0.4, 0.1, 0.1],\n [0.3, 0.2, 0.0, 0.4, 0.2, 0.3],\n [0.3, 0.4, 0.4, 0.0, 0.2, 0.1],\n [0.1, 0.1, 0.2, 0.2, 0.0, 0.1],\n [0.2, 0.1, 0.3, 0.1, 0.1, 0.0]]\nNotice how the diagonal is all zeros because these distances represent the distance of a sequence to itself. Also, notice that the part above the diagonal is a mirror the part below the diagonal (in bold). This is all a bit redundant, especially in this project where you will have to reduce the matrix as you group (or cluster) sequences together. We want something nice and lean where we only have the numbers we need – and that is the lower triangular matrix:\n0.1\n0.3 0.2\n0.3 0.4 0.4\n0.1 0.1 0.2 0.2\n0.2 0.1 0.3 0.1 0.1\nIn Python this is still just a list of lists, only, each sublist now has the same length as its index in the big list (E.g. [0.3, 0.2] has index 2 in the list and has length 2):\nmatrix = [[],\n              [0.1],\n              [0.3, 0.2],\n              [0.3, 0.4, 0.4],\n              [0.1, 0.1, 0.2, 0.2],\n              [0.2, 0.1, 0.3, 0.1, 0.1]]\nHere I am just writing it nicely. If you where to print that list of lists it would look like this:\n[[], [0.1], [0.3, 0.2], [0.3, 0.4, 0.4], [0.1, 0.1, 0.2, 0.2], [0.2, 0.1, 0.3, 0.1, 0.1]]\nSay your sequences had names: A, B, C, D, E, and F, then the above data structure represents distances between each pair like this:\nA \nB 0.1\nC 0.3 0.2\nD 0.3 0.4 0.4\nE 0.1 0.1 0.2 0.2\nF 0.2 0.1 0.3 0.1 0.1\n   A   B   C   D   E   F\nThere is only one drawback with this reduced representation of the full square matrix: In the full matrix you can get the distance between the sequences with indexes i and j as both matrix[i][j] and matrix[j][i] because the part above and below the diagonal are the same. Using the lower triangular matrix, you must always use the largest index first. Using the smaller one first will give you an IndexError. So if you want the distance between sequences with index 2 and 4, you must use the bigger index first (as the row index): matrix[4][2].",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Project: Clustering sequences based on distance ⁕</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/seqdist_project.html#generate-a-distance-matrix",
    "href": "lecture_notes/chapters/project/seqdist_project.html#generate-a-distance-matrix",
    "title": "Project: Clustering sequences based on distance ⁕",
    "section": "Generate a distance matrix",
    "text": "Generate a distance matrix\nWrite a function, lower_trian_matrix, which takes one argument:\n\nA list of strings. All strings have equal length and represent DNA sequences.\n\nThe function must return:\n\nA list of lists of floats, which represent the lower triangular matrix of Jukes-Cantor distances between DNA sequences given as argument.\n\nExample usage:\nsequences = ['TAAAAAAAAAAA', \n             'TTAAAAAAAAAA', \n             'AAAAAAAAAAGG', \n             'AAAAAAAAGGGG']\nlower_trian_matrix(sequences)\nhere lower_trian_matrix should return:\n[[], \n [0.08833727674228764], \n [0.30409883108112323, 0.4408399986765892], \n [0.6081976621622466, 0.8239592165010822, 0.18848582121067953]]\nYou should use sequence_difference to compute the proportion of differences between each pair of sequences and jukes_cantor to produce the corrected distance to fill into the matrix.\nStart by figuring out what pairs of indexes you need and then figure out how you can make two nested for-loops generate them. Remember that the length of each sublist is equal to its index in the big list.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Project: Clustering sequences based on distance ⁕</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/seqdist_project.html#clustering",
    "href": "lecture_notes/chapters/project/seqdist_project.html#clustering",
    "title": "Project: Clustering sequences based on distance ⁕",
    "section": "Clustering",
    "text": "Clustering\nNow that you have the distance matrix you are ready for the actual clustering. There are three steps to that:\n\nFind the pair you want to join\nCompute the distances between the joined pair and all other elements (linkage)\nKeep going until you only have one left\n\nDepending on how you choose which pair to join and how you compute the new distances for the joined pair determines what kind of clustering you do. Here we will try a centroid-like linkage called WPGMA. It does not work as well as UPGMA but is a bit easier to implement (you can look up WPGMA on wikipedia).\n\nFind the pair to join\nHere you want to be able to find the pair with the smallest distance. To do that we identify the cell in the matrix with the smallest value:\nWrite a function, find_lowest_cell, which takes one argument:\n\nA list of lists, which represents a lower triangular distance matrix as returned by lower_trian_matrix.\n\nThe function must return:\n\nA list of two integers, which represent the row and column index of the cell with the smallest value in the matrix.\n\nRemember that the row index is always smaller than the column index. The two indexes tell you which two elements to join next.\nExample usage: Assuming that matrix is the lower triangular matrix returned by lower_trian_matrix in the previous example, then\nfind_lowest_cell(matrix)\nShould return\n[1, 0]\n\n\nDecide on a linkage method\nYou also need a function that computes a new distance from two original ones using the the centroid-like linkage we have decided to use.\nWrite a function, link, that takes two arguments:\n\nA float, which represents a matrix element.\nA float, which represents another matrix element.\n\nThe function must return:\n\nA float, which is the average of the two arguments\n\nExample usage:\nlink(0.4, 0.2)\nShould return:\n0.3",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Project: Clustering sequences based on distance ⁕</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/seqdist_project.html#perform-the-clustering",
    "href": "lecture_notes/chapters/project/seqdist_project.html#perform-the-clustering",
    "title": "Project: Clustering sequences based on distance ⁕",
    "section": "Perform the clustering",
    "text": "Perform the clustering\nThe three functions that do the actual clustering are complicated but you should be able to follow what they do. The first one updates the table to reflect that you join a pair. The second updates the list of sequence names (labels) to reflect that you joined a pair. The last one uses the two other functions to cluster pair until there is only one cluster left.\nYour task is to carefully type the code for each function and to understand what every line of code does.\n\nUpdating labels\nThe function update_labels takes three arguments:\n\nA list of strings representing sequence names.\nAn integer representing the index of a sequence name.\nAn integer representing the index of another sequence name.\n\nThe function does not return anything, but it updates the list of names to reflect that you joined a pair. If your list looks like this before you call the function:\nlabels = ['A', 'B', 'C', 'D']\nThen after you call the function like this update_labels(labels, 1, 0), the list will look like this:\n['(A,B)', 'C', 'D']\nHere is the function:\ndef update_labels(labels, i, j):\n\n    # turn the label at first index into a combination of both labels\n    labels[j] = \"({},{})\".format(labels[j], labels[i])\n\n    # Remove the (now redundant) label in the first index\n    del labels[i]\n\n\nUpdating the matrix\nThe function update_table takes three arguments:\n\nA list of lists, which represents a lower triangular distance matrix.\nAn integer representing the index of one of the elements to join.\nAn integer representing the index of the other element to join.\n\nThe way this function is implemented, it is assumed that the second argument is always larger than the third argument. I.e. the second argument is a row index and the third argument is a column index.\nThe function does not return anything, but it updates the matrix to reflect that a pair has been joined. If your matrix looks like this before you call the function:\nm = [[], [0.1], [0.3, 0.4], [0.6, 0.8, 0.2]]\nThen after you call the function like this update_table(m, 1, 0), the matrix will look like this:\n[[], [0.35], [0.7, 0.2]]\nHere is the function:\ndef update_table(table, a, b):\n\n    # For the lower index, reconstruct the entire row (ORANGE)\n    for i in range(0, b):\n        table[b][i] = link(table[b][i], table[a][i])\n\n    # Link cells to update the column above the min cell (BLUE)\n    for i in range(b+1, a):\n        table[i][b] = link(table[i][b], table[a][i])\n        \n    # Link cells to update the column below the min cell (RED)\n    for i in range(a+1, len(table)):\n        table[i][b] = link(table[i][b], table[i][a])\n\n    # Delete cells we no longer need (lighter colors)\n    for i in range(a+1, len(table)):\n        # Remove the (now redundant) first index column entry\n        del table[i][a]\n    # Remove the (now redundant) first index row\n    del table[a] \nThe colors refer to cell colors on the slide you I showed you at the lecture.\n\n\nDo the clustering\nNow onto the real task, the actual clustering. The function cluster takes two arguments:\n\nA list of strings representing DNA sequences of equal length.\nA list of strings representing sequence names.\n\nThe function returns:\n\nA string representing the generated clustering.\n\nHere is the function:\ndef cluster(sequences, names):\n\n    table = lower_trian_matrix(sequences)\n    labels = names[:]\n\n    # Until all labels have been joined...\n    while len(labels) &gt; 1:\n        # Locate lowest cell in the table\n        i, j = find_lowest_cell(table)\n\n        # Join the table on the cell co-ordinates\n        update_table(table, i, j)\n\n        # Update the labels accordingly\n        update_labels(labels, i, j)\n\n    # Return the final label\n    return labels[0]\nHere is a simple example of how you can use your new clustering code:\nnames = ['A', 'B', 'C', 'D']\nsequences = ['TAAAAAAAAAAA', \n             'TTAAAAAAAAAA', \n             'AAAAAAAAAAGG', \n             'AAAAAAAAGGGG']\n\ntree = cluster(sequences, names)\nprint(tree)\n\n\nOn your own\nFrom here on you are on your own. If you find a FASTA file with aligned (ungapped) homologous sequences, you can use the function below to read it into your program and try your code out on real-world sequences. I will leave it to you to figure out how it works.\ndef read_fasta(filename):\n    f = open(filename, 'r')\n    record_list = []\n    header = \"\"\n    sequence = \"\"\n    for line in f:\n        line = line.strip() ## get rid of whitespace and newline\n        if line.startswith(\"&gt;\"):\n            if header != \"\": ## if it is the first header\n                record_list.append([header, sequence])\n                sequence = \"\"\n            header = line[1:]\n        else:\n            sequence += line\n    record_list.append([header, sequence])\n    return record_list",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Project: Clustering sequences based on distance ⁕</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/orf_project.html",
    "href": "lecture_notes/chapters/project/orf_project.html",
    "title": "Project: Finding genes in bacteria",
    "section": "",
    "text": "Finding Open Reading Frames",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Project: Finding genes in bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/orf_project.html#finding-open-reading-frames",
    "href": "lecture_notes/chapters/project/orf_project.html#finding-open-reading-frames",
    "title": "Project: Finding genes in bacteria",
    "section": "",
    "text": "Find the start positions of ORFs in a DNA sequence\nThe first task is to write a function that finds all the possible positions where an ORF can begin.\nWrite a function, find_start_positions, which takes one argument:\n\nA string, which is a DNA sequence.\n\nThe function must return:\n\nA list of integers, which represent the indexes of the first base in start codons in the DNA sequence argument.\n\nExample usage:\nfind_start_positions('TATGCATGATG')\nshould return\n[1, 5, 8]\nYour function should contain a for-loop that iterates over all possible positions in a DNA string where a codon can begin. Not surprisingly, these are all the positions except for the last two. So start out with this:\ndef find_start_positions(seq):\n    for i in range(len(seq) - 2):\n        print(i)\nNow, instead of just printing i, try and make it print the three bases following i using the slicing technique:\ntriplet = seq[i:i+3]\nI.e. if your sequence is 'TATGCATGATG' it should first print 'TAT' then 'ATG' then 'TGC' and so on.\nWhen you have this working you should change the code so that triplets are only printed if they are start codons. You can use an if-statement that tests if each triplet is equal to start_codon.\nThen try and make your function print i only when i is the first base of a start codon.\nFinally, modify the function so all the relevant values of i are collected in a list using the same technique as in the split_codons(orf) function, and then return this list from the function.\n\n\nFinding the next occurrence of some codon in an ORF\nNow that you can find where the ORFs begin in our sequence you must also be able to identify where each of these end. As you know, an ORF ends at any of three different stop codons in the same reading frame as the start codon. So, starting at the start codon of the ORF, we need to be able to find the next occurrence of some specific codon. I.e. you should look at all codons after the start codon and find the first occurrence of some specified codon. If the function does not find that codon in the string it should return None.\nWrite a function, find_next_codon, that takes three arguments:\n\nA string, which is the DNA sequence.\nAn integer, which is the index in the sequence where the ORF starts.\nA string, which is the codon to find the next occurrence of.\n\nThe function must return:\n\nAn integer, which is the index of the first base in the next in-frame occurrence of the codon. If the function does not find that codon in the string it should return None.\n\nExample usage:\nfind_next_codon('AAAAATTTAATTTAA', 1, 'TTT')\nshould return\n10\nYour function should contain a for-loop that iterates over all the relevant starts of codons. Remember that no valid codon can start at the last two positions in the sequence. E.g. if the second argument is 7 and the length of the sequence is 20 then the relevant indexes are 7, 10, 13, 16.\nStart by writing a function just with a for-loop that lets you print these indexes produced by range. Figure out how to make the range function iterate over the appropriate numbers.\ndef find_next_codon(seq, start, codon):\n    for idx in range( ?? ):\n        print(idx)\nWhen you have that working, use the slicing technique to instead print the codons that start at each index.\nFinally, add an if-statement that tests if each codon is equal to codon. When this is true, the function should return the value of idx.\n\n\nFinding the first stop codon in an ORF\nNow that you can find the next occurrence of any codon, you are well set up to write a function that finds the index for the beginning of the next in-frame stop codon in an ORF.\nWrite a function, find_next_stop_codon, that takes two arguments:\n\nA string, which is the DNA sequence.\nAn integer, which is the index in the sequence where the ORF starts.\n\nThe function must return:\n\nAn integer, which is the index of the first base in the next in-frame stop codon. If there is no in-frame stop codon in the sequence the function should return None.\n\nExample usage:\nfind_next_stop_codon('AAAAATAGATGAAAA', 2)\nshould return\n5\nHere is some inspiration:\n\nYou should define a list to hold the indexes for the in-frame stop codons we find.\nThen we loop over the three possible stop codons to find the next in-frame occurrence of each one from the start index. You can use find_next_codon for this. Remember that it returns None if it does not find any. If it does find a position you can add it to your list.\nAt the end, you should test if you have any indexes in your list.\nIf you do, you should return the smallest index in the list. I.e the ones closest to the start codon.\nIf you did not find any stop codons the function must return None to indicate this.\n\n\n\nFinding ORFs\nNow you can write a function that uses find_start_positions and find_next_stop_codon to extract the start and end indexes of each ORF in a genomic sequence.\nWrite a function, find_orfs, that takes one argument:\n\nA string, which is a DNA sequence.\n\nThe function should return:\n\nA list, which contains lists with two integers. The list returned must contain a list for each ORF in the sequence argument. These lists each contain two integers. The first integer represents the start of the ORF, the second represents the end. The function should handle both uppercase and lowercase sequences.\n\nExample usage:\nfind_orfs(\"AAAATGGGGTAGAATGAAATGA\")\nshould return\n[[3, 9], [13, 19]]\nStart by using find_start_positions to get a list of all the start positions in sequence:\ndef find_orfs(seq):\n    start_positions = find_start_positions(seq)\nWhen you have that working, add a for-loop that iterates over the start positions. Inside the for-loop, you can then get the next in-frame stop codon for each start position by calling find_next_stop_codon. Try to print the start and end indexes you find to make sure the code does what you think.\nFinally, you need to add a [start, stop] list for each ORF to the big list that the function returns. To append a list to a list you do write something like this:\norf_coordinate_list.append([start, stop])\nTest your function. Chances are that some of the end positions you get are None. This is because some of the start codons were not followed by an in-frame stop codon. Add an if-statement to your function that controls that only start-stop pairs with a valid stop coordinate are added to the list of results.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Project: Finding genes in bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/orf_project.html#translation-of-open-reading-frames",
    "href": "lecture_notes/chapters/project/orf_project.html#translation-of-open-reading-frames",
    "title": "Project: Finding genes in bacteria",
    "section": "Translation of open reading frames",
    "text": "Translation of open reading frames\nWe need to translate the reading frames we find into the proteins they may encode. So why not use the code you already wrote in the programming project where you translated open frames? Copy the content of translationproject.py into orfproject.py. Now you can use the function translate_orf to translate your ORFs.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Project: Finding genes in bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/orf_project.html#put-everything-together",
    "href": "lecture_notes/chapters/project/orf_project.html#put-everything-together",
    "title": "Project: Finding genes in bacteria",
    "section": "Put everything together",
    "text": "Put everything together\n\nRead in genomic sequences\nThe file e_coli_O157_H157_str_Sakai.fasta contains the genome that we want to analyze to find open reading frames. This is an especially nasty strain of Escherichia coli O157:H7 isolated after a massive outbreak of infection in school children in Sakai City, Japan, associated with consumption of white radish sprouts.\nYou can use the function below to read the genome sequence into a string.\ndef read_genome(file_name):\n    f = open(file_name, 'r')\n    lines = f.readlines()\n    header = lines.pop(0)\n    substrings = []\n    for line in lines:\n        substrings.append(line.strip())\n    genome = ''.join(substrings)\n    f.close()\n    return genome\nNow for the grand finale: Using read_genome, find_orfs and translate_orf you can write a function that finds all protein sequences produced by open reading frames in the genome.\nWrite a function, find_candidate_proteins, that takes one argument:\n\nA string, which is a genome DNA sequence.\n\nThe function must return\n\nA list of strings, which each represent a possible protein sequence.\n\nNote that this is a full genome so finding all possible proteins will take a while (~5 min.). You can start by working on the first 1000 bases:\nExample usage:\ngenome = read_genome('e_coli_O157_H157_str_Sakai.fasta')\nfirst_1000_bases = genome[:1000]\nfind_candidate_proteins(first_1000_bases)\nshould return\n['MSLCGLKKESLTAASELVTCRE*', 'MKRISTTITTTITTTITITITTGNGAG*',\n 'MQNVFCGLPIFWKAMPGRGRWPPSSLPPPKSPTTWWR*', 'MPGRGRWPPSSLPPPKSPTTWWR*',\n 'MLYPISAMPNVFLPNF*', 'MPNVFLPNF*', 'MSCMALVC*', 'MALVC*']\nThe function should call find_orfs to get the list of start-end pairs. For each index pair, you must then slice the ORF out of the sequence (remember that the end index represents the first base in the stop codon), translate the ORF to protein, and add it to a list of proteins that the function can return.\nHint: To check your result note that all returned sequences should start with a start codon 'M', end with a stop codon '*' and contain no stop codons in the middle.\n\n\nOn your own\nThis is where this project ends, but you can continue if you like. Given a long list of candidate proteins of all sizes, what would you do to narrow down your prediction to a smaller set of very likely genes? If you have some ideas, then try them out.\n\nMaybe you can rank them by length? What is the expected minimum length of proteins?\nMaybe you can look for a Shine-Delgarno motif upstream of the start codon? You know how to do that from the lectures.\nYou can also try to BLAST them against the proteins in Genbank. The true ones should have some homologs in other species.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Project: Finding genes in bacteria</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/assembly_project.html",
    "href": "lecture_notes/chapters/project/assembly_project.html",
    "title": "Project: Genome assembly",
    "section": "",
    "text": "Read and analyze the sequencing reads\nThe first task is to read and parse the input data. The sequence reads for the mini-assembly are in the file sequencing_reads.txt. The first two lines of the file look like this:\nEach line represents a read. The first field on each line is the name of the read and the second field is the read sequence itself. So for the first line Read1 is the name and ATGCG... is the sequence.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Project: Genome assembly</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/assembly_project.html#read-and-analyze-the-sequencing-reads",
    "href": "lecture_notes/chapters/project/assembly_project.html#read-and-analyze-the-sequencing-reads",
    "title": "Project: Genome assembly",
    "section": "",
    "text": "Read1 GGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTCGTCCAGACCCCTAGC\nRead2 CTTTACCCGGAAGAGCGGGACGCTGCCCTGCGCGATTCCAGGCTCCCCACGGG\n\n\nRead the sequencing reads into your program\nWrite a function, read_data, that takes one argument:\n\nA string, which is the name of the data file.\n\nThe function must return\n\nA dictionary, where the keys are the names of reads and the values are the associated read sequences. Both keys and values must be strings.\n\nExample usage:\nread_data('sequencing_reads.txt')\nshould return a dictionary with the following content (maybe not with key-value pairs in that order)\n{'Read1': 'GGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTCGTCCAGACCCCTAGC',\n 'Read3': 'GTCTTCAGTAGAAAATTGTTTTTTTCTTCCAAGAGGTCGGAGTCGTGAACACATCAGT',\n 'Read2': 'CTTTACCCGGAAGAGCGGGACGCTGCCCTGCGCGATTCCAGGCTCCCCACGGG',\n 'Read5': 'CGATTCCAGGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTC',\n 'Read4': 'TGCGAGGGAAGTGAAGTATTTGACCCTTTACCCGGAAGAGCG',\n 'Read6': 'TGACAGTAGATCTCGTCCAGACCCCTAGCTGGTACGTCTTCAGTAGAAAATTGTTTTTTTCTTCCAAGAGGTCGGAGT'}\nHere is some scaffold code to get you started:\ndef read_data(file_name):\n    input_file = open(file_name)\n    # ...\n    for line in input_file:\n         # ...    \n    # ...\n    \n    input_file.close() \n    \nThe line variable in the for loop holds each line in the file including the \\n newline character at the end. To split each line into the name of the read and the read sequence, you can use the split method of strings. You can see the documentation for that method by typing pydoc str.split in your terminal.\n\n\nCompute the mean length of reads\nHaving written that function we would like to get some idea about how long the reads are. More often than not there are too many reads to look at them manually, so we need to make a function that computes the mean length of the reads.\nWrite a function, mean_length, that takes one argument:\n\nA dictionary, in which keys are read names and values are read sequences (this is a dictionary like that returned by read_data).\n\nThe function must return\n\nA float, which is the average length of the sequence reads.\n\nOne way to do this is to loop over the keys in the dictionary like this:\ndef mean_length(reads):\n    count = 0\n    total = 0\n    for name in reads:\n        seq = reads[name]\n        # ...\n        # ...\n    # ...\n    return total / count\nRemember that you can use the len function to find the length of a read.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Project: Genome assembly</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/assembly_project.html#compute-overlaps-between-reads",
    "href": "lecture_notes/chapters/project/assembly_project.html#compute-overlaps-between-reads",
    "title": "Project: Genome assembly",
    "section": "Compute overlaps between reads",
    "text": "Compute overlaps between reads\nNext thing is to figure out which reads overlap each other. To do that we need a function that takes two read sequences and computes their overlap. Remember that in the input data none of the reads are completely nested in another read.\n\nCompute the overlap between two reads\nWe know that there are no sequencing errors, so in the overlap, the sequence match will be perfect. To compute the overlap between the 3’ (right) end of the left read with the 5’ (left) end of the right read, you need to loop over all possible overlaps honoring that one sequence is the left one and the other is the right one. In the for loop, start with the largest possible overlap ( min(len(left), len(right))) and evaluate smaller and smaller overlaps until you find an exact match.\nWrite a function, get_overlap, that takes two arguments\n\nA string, which is the left read sequence.\nA string, which is the right read sequence.\n\nThe function must return\n\nA string, which is the overlapping sequence. If there is no overlap it should return an empty string.\n\nExample usage:\ns1 = \"CGATTCCAGGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTC\"\ns2 = \"GGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTCGTCCAGACCCCTAGC\"\nget_overlap(s1, s2)\nshould return the string\n'GGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTC'\nand get_overlap(s2, s1)\nshould return the string\n'C'\nFrom these two examples it seems that s1 and s2 overlap and that s1 is the left one and s2 is the right one. Treating s2 as the left one and s1 as the right one only gives an overlap of one base (we expect a few bases of overlap even for unrelated sequences).\n\n\n\n\nCompute all read overlaps\nWhen you have written get_overlap you can use it to evaluate the overlap between all pairs of reads in both left-right and right-left orientations.\nWrite a function, get_all_overlaps, that takes one argument:\n\nA dictionary with read data as returned by read_data.\n\nThe function must return\n\nA dictionary of dictionaries, specifying the number of overlapping bases for a pair of reads in a specific left-right orientation. Computing the overlap of a read to itself is meaningless and must not be included. Assuming the resulting dictionary of dictionaries is called d, then d['Read2'] will be a dictionary where keys are the names of reads that have an overlap with read 'Read2' when 'Read2' is put in the left position, and the values for these keys are the number of overlapping bases for those reads.\n\nExample usage: assuming that reads is a dictionary returned by read_data then:\nget_all_overlaps(reads)\nshould return the following dictionary of dictionaries (but not necessarily with the same ordering of the key-value pairs):\n{'Read1': {'Read3': 0, 'Read2': 1, 'Read5': 1, 'Read4': 0, 'Read6': 29},\n 'Read3': {'Read1': 0, 'Read2': 0, 'Read5': 0, 'Read4': 1, 'Read6': 1},\n 'Read2': {'Read1': 13, 'Read3': 1, 'Read5': 21, 'Read4': 0, 'Read6': 0},\n 'Read5': {'Read1': 39, 'Read3': 0, 'Read2': 1, 'Read4': 0, 'Read6': 14},\n 'Read4': {'Read1': 1, 'Read3': 1, 'Read2': 17, 'Read5': 2, 'Read6': 0},\n 'Read6': {'Read1': 0, 'Read3': 43, 'Read2': 0, 'Read5': 0, 'Read4': 1}}\nHint: You can use the get_overlap function you just made to find the overlap between a pair of reads. To generate all combinations of reads you need two for-loops. One looping over reads in left positions and another (inside the first one) looping over reads in right position. Remember that we do not want the overlap of a read to itself, so there should be an if-statement in the checking of the left and right reads are the same.\n\n\nPrint overlaps as a nice table\nThe dictionary returned by get_all_overlaps is a little messy to look at. We want to print it in a nice matrix-like format so we can better see which pairs overlap in what orientations.\nThis pretty_print function, should take one argument:\n\nA dictionary of dictionaries as returned by get_all_overlaps.\n\nThe function should not return anything but must print a matrix exactly as shown in the example below with nicely aligned and right-justified columns. The first column must hold names of reads in left orientation. The top row holds names of reads in right orientation. Remaining cells must each hold the number of overlapping bases for a left-right read pair. The diagonal corresponds to overlaps to the read itself. You must put dashes in these cells.\nExample usage: assuming that overlaps is a dictionary of dictionaries returned by get_all_overlaps then:\npretty_print(overlaps)\nshould print exactly\n       Read1  Read2  Read3  Read4  Read5  Read6 \nRead1      -      1      0      0      1     29 \nRead2     13      -      1      0     21      0\nRead3      0      0      -      1      0      1\nRead4      1     17      1      -      2      0 \nRead5     39      1      0      0      -     14 \nRead6      0      0     43      1      0      -\nThis function is hard to get completely right. So to spare you the frustration, this one is on me:\ndef pretty_print(d):\n    print('      ', end='')\n    for j in sorted(d):\n        print(\"{: &gt;6}\".format(j), end='')\n    print()\n    for i in sorted(d):\n        print(\"{: &gt;6}\".format(i), end='')\n        for j in sorted(d):\n            if i == j:\n                s = '     -'\n            else:\n                s = \"{: &gt;6}\".format(d[str(i)][str(j)])\n            print(s, end='')\n        print()\nMake sure you understand how it works. You can look up in the documentation what \"{: &gt;6}\".format(i) does.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Project: Genome assembly</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/assembly_project.html#find-the-right-order-of-reads",
    "href": "lecture_notes/chapters/project/assembly_project.html#find-the-right-order-of-reads",
    "title": "Project: Genome assembly",
    "section": "Find the right order of reads",
    "text": "Find the right order of reads\nNow that we know how the reads overlap we can chain them together pair by pair from left to right to get the order in which they represent the genomic sequence. To do this we take the first (left-most) read and identify which read has the largest overlap to its right end. Then we take that read and find the read with the largest overlap to the right end of that - and so on until we reach the rightmost (last) read.\n\nFind the first read\nThe first thing you need to do is to identify the first (leftmost) read so we know where to start. This read is identified as the one that has no significant (&gt;2) overlaps to its left end (it only has a good overlap when positioned to the left of other reads). In the example output from pretty_print above the first read would be read 'Read4' because the 'Read4' column has no significant overlaps (no one larger than two).\nWe break the problem in two and first write a function that gets all the overlaps to the left end of a read (i.e. when it is in the right position):\nWrite a function, get_left_overlaps, that takes two arguments:\n\nA dictionary of dictionaries as returned from get_all_overlaps.\nA string, which represents the name of a read.\n\nThe function must return\n\nA sorted list of integers, which represent the overlaps of other reads to its left end.\n\nExample usage: assuming that overlaps is a dictionary of dictionaries returned by get_all_overlaps then.\nget_left_overlaps(overlaps, 'Read1')\nshould return\n[0, 0, 1, 13, 39]\nHint: once you have made a list of left overlaps, you can use the builtin function sorted to make a sorted version of the list that you can return from the function.\nOK, now that we have a function that can find all the overlaps to the left end of a given read, all we need to do is find the particular read that have no signifiant (&gt;2) overlaps to its left end.\nWrite a function, find_first_read, that takes one argument:\n\nA dictionary of dictionaries as returned from get_all_overlaps.\n\nThe function must return\n\nA string containing the name of the first read.\n\nExample usage: assuming that overlaps is a dictionary of dictionaries returned by get_all_overlaps then.\nfind_first_read(overlaps)\nshould return\n'Read4'\n\n\nFind the order of reads\nNow that we have the first read we can find the correct ordering of reads. We want a list of the read names in the right order.\nGiven the first (left) read, the next read is the one that has the largest overlap to the right end of that read. To figure out which read that is, we use our dictionary of overlaps. If the first read is 'Read4' then overlaps['Read4'] is a dictionary of reads with overlap to the right end of read 'Read4'. So to find the name of the read with the largest overlap you must write a function that finds the key associated with the largest value in a dictionary. We do that first:\nWrite a function, find_key_for_largest_value, that takes one argument:\n\nA dictionary.\n\nThe function must return the key associated with the largest value in the dictionary argument.\nHaving written find_key_for_largest_value you can use it as a tool in the function the finds the order of reads:\nWrite a function, find_order_of_reads, that takes two arguments:\n\nA string, which is the name of the first (left-most) read (that returned by find_first_read).\nA dictionary of dictionaries, of all overlaps (that returned by get_all_overlaps).\n\nThe function must return\n\nA list of strings, which are read names in the order in which they represent the genomic sequence.\n\nHints: You know the first read is given by the first argument to the function, you also know that you can find the next read in the chain of overlapping reads by using the find_key_for_largest_value function, and you know that you should keep adding on reads to the chain as long as the overlap is larger than two (you can use a for-loop with an if-statement inside to check that the overlap is larger than 2).\nExample usage: assuming that overlaps is a dictionary of dictionaries returned by get_all_overlaps then:\nfind_order_of_reads('Read4', overlaps)\nshould return:\n['Read4', 'Read2', 'Read5', 'Read1', 'Read6', 'Read3']\nMake sure you understand why this is the right list of read names before you try to implement the function.",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Project: Genome assembly</span>"
    ]
  },
  {
    "objectID": "lecture_notes/chapters/project/assembly_project.html#reconstruct-the-genomic-sequence",
    "href": "lecture_notes/chapters/project/assembly_project.html#reconstruct-the-genomic-sequence",
    "title": "Project: Genome assembly",
    "section": "Reconstruct the genomic sequence",
    "text": "Reconstruct the genomic sequence\nNow that you have the number of overlapping bases between reads and the correct order of the reads you can reconstruct the genomic sequence.\n\nReconstruct the genomic sequence from the reads\nWrite a function, reconstruct_sequence, that takes three arguments:\n\nA list of strings, which are the names of reads in the order identified by find_order_of_reads.\nA dictionary, with read data as returned from read_data.\nA dictionary of dictionaries with overlaps as returned from get_all_overlaps.\n\nThe function must return\n\nA string, which is the genomic sequence.\n\nExample usage: assuming that order is the list of strings returned by find_order_of_reads, that reads is the dictionary returned by read_data and that overlaps is a dictionary of dictionaries returned by get_all_overlaps then:\nreconstruct_sequence(order, reads, overlaps)    \nshould return one long DNA string (had to break it in three to make it fit on the page):\nTGCGAGGGAAGTGAAGTATTTGACCCTTTACCCGGAAGAGCGGGACGCTGCCCTGCGCGATT\nCCAGGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTCGTCCAGACCCCTAGCTGGTA\nCGTCTTCAGTAGAAAATTGTTTTTTTCTTCCAAGAGGTCGGAGTCGTGAACACATCAGT\nHint: iterate over the reads in order and use the overlap information to extract and join the appropriate parts of the reads.\n\n\nPutting the whole thing together\nNow that you have written functions to take care of each step you can write one last function that uses them to do the entire assembly.\nWrite a function, assemble_genome, that takes one argument:\n\nA string, which is the name of a file with sequencing reads in the format described in the beginning of this project description.\n\nThe function must return\n\nA string, which is the genome assembled from the sequencing reads\n\nExample usage:\nassemble_genome('sequencing_reads.txt')\nshould return the assembled genome:\nTGCGAGGGAAGTGAAGTATTTGACCCTTTACCCGGAAGAGCGGGACGCTGCCCTGCGCGATT\nCCAGGCTCCCCACGGGGTACCCATAACTTGACAGTAGATCTCGTCCAGACCCCTAGCTGGTA\nCGTCTTCAGTAGAAAATTGTTTTTTTCTTCCAAGAGGTCGGAGTCGTGAACACATCAGT",
    "crumbs": [
      "Programming projects",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Project: Genome assembly</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Learning Python",
    "section": "",
    "text": "This website",
    "crumbs": [
      "This website"
    ]
  },
  {
    "objectID": "supplementary/suppl2024.html",
    "href": "supplementary/suppl2024.html",
    "title": "Week 1",
    "section": "",
    "text": "Monday\nUnfortunately, the Monday recording failed :/",
    "crumbs": [
      "Recordings",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Week 1</span>"
    ]
  },
  {
    "objectID": "supplementary/suppl2024.html#wednesday",
    "href": "supplementary/suppl2024.html#wednesday",
    "title": "Week 1",
    "section": "Wednesday",
    "text": "Wednesday",
    "crumbs": [
      "Recordings",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Week 1</span>"
    ]
  }
]